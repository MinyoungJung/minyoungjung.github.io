<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Ringsterz Log</title>
 <link href="https://minyoungjung.github.io/atom.xml" rel="self"/>
 <link href="https://minyoungjung.github.io/"/>
 <updated>2019-10-23T18:53:29+09:00</updated>
 <id>https://minyoungjung.github.io/</id>
 <author>
   <name>Minyoung Jung</name>
   <email></email>
 </author>

 
 <entry>
   <title>2019-10-23 Blog</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2019-10-23T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//2019/10/23/subject</id>
   <content type="html">
</content>
 </entry>
 
 <entry>
   <title>Google Code Jam 2019</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2019-04-09T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/2019/04/09/google-code-jam-2019</id>
   <content type="html">&lt;h2 id=&quot;code-jam-2019&quot;&gt;Code Jam 2019&lt;/h2&gt;
&lt;p&gt;작년과 마찬가지로 올해도 Code Jam 예선을 참 했다.
예선은 하루종일 진행되어 시간날때 틈틈히 풀면 되서 딱히 부담스럽지 않았다.&lt;/p&gt;

&lt;h2 id=&quot;예선-문제-리뷰&quot;&gt;예선 문제 리뷰&lt;/h2&gt;
&lt;p&gt;올해도 파이썬을 이용해 Code Jam에 참여했다.&lt;/p&gt;

&lt;h3 id=&quot;문제1-foregone-solution-17점&quot;&gt;문제1. Foregone Solution (17점)&lt;/h3&gt;
&lt;p&gt;4가 들어간 입력을 적절히 분리하여 출력하는 문제였다.
아래와 같이 4를 1과 3이든 2와 2로 분리하든 N = A+B 형태로만 출력하면 되는 문제였다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4     Case #1: 2 2
940   Case #2: 852 88
4444  Case #3: 667 3777

1 ≤ T ≤ 100.
Time limit: 10 seconds per test set.
Memory limit: 1GB.
At least one of the digits of N is a 4.

Test set 1 (Visible)
1 &amp;lt; N &amp;lt; 10^5.

Test set 2 (Visible)
1 &amp;lt; N &amp;lt; 10^9.

Test set 3 (Hidden)
1 &amp;lt; N &amp;lt; 10^100.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;단순히 첫 문자부터 4를 찾을때마다 2와 2로 나누어주는 식으로 구현했고, AC판정을 받았다.&lt;/p&gt;

&lt;h3 id=&quot;문제2-you-can-go-your-own-way-24점&quot;&gt;문제2. You Can Go Your Own Way (24점)&lt;/h3&gt;
&lt;p&gt;미로찾기 문제였는데, 처음 간 사람의 경로를 따라가지 않아야 하는 조건이 붙어있었다.
제일 먼저 떠오른 생각은 그래프로 미로를 표현한 후 BFS로 경로를 탐색하는 것이었는데, 마지막 테스트 셋의 크기가 부담스러웠다.
메모리 제한 및 시간제한에 분명히 걸릴 것 같아서, (안그래도 파이썬으로 풀고있는데..) 다른 방법을 생각해 보았다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Test set 1 (Visible)
2 ≤ N ≤ 10.

Test set 2 (Visible)
2 ≤ N ≤ 1000.

Test set 3 (Hidden)
For at most 10 cases, 2 ≤ N ≤ 50000.
For all other cases, 2 ≤ N ≤ 10000.

1 ≤ T ≤ 100.
Time limit: 15 seconds per test set.
Memory limit: 1GB.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;어떠한 경로든지 겹치지만 않으면 된다고 해서 단순히 처음 간 사람의 경로를 대칭으로 이동하는 방법으로 구현, AC 판정을 받았다.&lt;/p&gt;

&lt;h3 id=&quot;문제3-cryptopangrams-25점&quot;&gt;문제3. Cryptopangrams (25점)&lt;/h3&gt;
&lt;p&gt;알파벳 암호화와 관련된 문제였다. N까지의 소수중 알파벳 갯수만큼 소수를 선택해 작은 순부터 ABCD에 매핑하고,
이후 그 두 수의 곱을 입력으로 주면 그 입력에서 원래의 문자열을 추출하는 문제였다.
문자열에는 ABC..Z가 최소 한번은 포함되어 있다.&lt;/p&gt;

&lt;p&gt;A B C D가 3 5 7 11이라 하면, CAD라는 문자열은 7&lt;em&gt;3 3&lt;/em&gt;11해서 21 33이 주어지는 식이다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 1 ≤ T ≤ 100.
 Time limit: 20 seconds per test set.
 Memory limit: 1 GB.
 25 ≤ L ≤ 100.
 The plaintext contains each English alphabet letter at least once.
 
 Test set 1 (Visible)
 101 ≤ N ≤ 10000.
 
 Test set 2 (Hidden)
 101 ≤ N ≤ 10^100.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;제일 먼저 든 생각은 암호화 된 숫자들에서 제일 작은 숫자를 골라서 소인수 분해를 해보자는 생각.
 문제는 큰 수에 대한 소인수 분해가 힘들다는것.. 테스트 셋 2를 통과할 가망이 없었다
 그다음으로 생각한 것은 숫자들이 A&lt;em&gt;B, B&lt;/em&gt;C, C*D와 같은 형태로 이루어져 있고 나머지 두 수는 소수이니,
 두 수의 공약수를 찾으면 되겠다는 생각.
 공약수야 아무리 큰 수라도 유클리드 호제법을 사용하면 빠르게 찾을 수 있으니, 이걸로 풀면 되겠다는 생각이 들었다.
 그래서 처음에는 두 수의 공약수를 찾아가면서 마지막까지 찾아내고, 처음과 끝에 나머지 글자들을 붙여주게 구현을 했는데 실패.
 다시 생각해보니 최초 하나의 공약수만 찾아낸 후 그걸로 나머지 숫자들을 계속 나누어주면 더 쉽게 풀리는 문제였다.&lt;/p&gt;

&lt;p&gt;다시 구현해서 제출하니 또 실패. 정답이라고 생각한 아이디어였는데 계속해서 오답처리가 나니 짜증나서 암호화 문장을 제작하는 프로그램을 작성. TC를 몇개 돌려보니 ABABA와 같은 반복적인 문자열이 나올때, 같은 숫자가 연속되고 최대 공약수가 그냥 그 숫자 자체가 되어버리는 경우가 있다는 것을 발견했다.
 이럴 경우 A~Z가 한번은 나오게 되어있다는 가정을 이용하면, 다른 숫자가 나오는 경우가 반드시 있으므로 이때 최대공약수를 구해서 반대로 값을 메꾸어 나가면 된다. 이를 이용한 코드를 제출하여 AC 판정을 받았다.&lt;/p&gt;

&lt;h3 id=&quot;문제4-dat-bae-34점&quot;&gt;문제4. Dat Bae (34점)&lt;/h3&gt;
&lt;p&gt;N개의 컴퓨터 중 고장난 B 대의 컴퓨터를 찾아내는 문제, F번 만큼 쿼리를 날려 응답을 받을수 있다.
TEST_STORE 01101 returns 111.
TEST_STORE 00110 returns 010.
TEST_STORE 01010 returns 100.
TEST_STORE 11010 also returns 100.
0번째 3번째 컴퓨터가 고장났다고 가정했을때의 응답은 위와 같다.&lt;/p&gt;

&lt;p&gt;4번은 인터렉션 문제이며 채점 서버에 출력을 날린 후 다시 입력을 받아 그걸 가지고 정답을 찾아내야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Time limit: 20 seconds per test set.
Memory limit: 1GB.
1 ≤ T ≤ 100.
2 ≤ N ≤ 1024.
1 ≤ B ≤ min(15, N-1).

Test set 1 (Visible)
F = 10.
Test set 2 (Hidden)
F = 5.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;작년에 새로 등장한 인터렉션 문제는 뭔가 로컬에서 테스트 하는 방법부터가 번거로운 느낌이라 영 적응이 되지 않는다.
사실 문제 4번까지 올 시점이 되면 이미 예선은 통과한 시점이라 파이팅이 좀 떨어지기도 한다. (어렵기도 하고…)
하지만 이번 문제들이 접근만 올바르면 몇 줄 안되는 코드로 풀려버리는 문제들이 많아 흥미로웠고, 마지막까지 도전해보기로 했다.&lt;/p&gt;

&lt;p&gt;처음 봤을때 든 생각은 비트마스크를 이용하는 문제인가라는 생각. 
1,2,3번과 마찬가지로 각각의 테스트 셋을 관통하는 풀이를 찾고 싶었는데 쉽게 접근 방법이 떠오르지 않았다.
일단 N의 크기가 2^1에서 2^10라는 점에서 테스트 셋 1의 F=10이 관련이 있겠구나 싶었는데, 
그럼 5번안에는 어떻게 고장난 컴퓨터들을 분별해야 할지 잘 떠오르지 않았다.
고장난 컴퓨터의 수가 min(2^4-1, N-1)이라는 점을 이용할 수 있을 것 같았는데…
결국 해당 문제는 풀지 못했다.&lt;/p&gt;

&lt;p&gt;나중에 풀이 접근을 보니
01010…
00110…
00001…
00000…
00000…
00000…
00000…
00000…
00000…
00000…
와 같이 각 10줄의 쿼리에 2진수 0부터 N-1 까지 날려보내면 출력에서 사라진 숫자를 통해 고장난 컴퓨터의 번호를 알수 있다.&lt;/p&gt;

&lt;p&gt;문제는 F=5인 경우인데, 5bit으로 표현할 수 있는 크기가 2^5 = 32 뿐이다.
이때 중요한 점은 고장난 컴퓨터의 수가 min(2^4-1, N-1)이므로 고장난 최대 컴퓨터의 수는 15를 넘지 못한다.
이는 5비트 안에 충분히 포함할 수 있는 수이고, 이점을 이용해
01010…010101…10101
00110…001100…10011
00001…000011…01111
00000…000000…11111
00000…111111…11111
0, 1, 2, 3, 4… 16, 17, 18, 19, 20, 21… 27, 28, 29, 30, 31&lt;br /&gt;
을 반복해서 날리면, 한 구간이 통제로 소멸될 일이 없으므로 고장난 번호를 알아낼 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;
&lt;p&gt;알고리즘을 손에서 놓지 않기 위해 매년 참가 신청을 했고, 예선 통과라는 소기의 목표도 이미 달성했지만, 1라운드도 참가해야겠다.
부족한 점은 많고 알고리즘은 항상 어렵지만,  아이디어를 통해 문제를 명쾌하게 풀어낼 때의 쾌감이 있다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Google Code Jam, 그리고 파이썬</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2018-04-11T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/2018/04/11/google-code-jam</id>
   <content type="html">&lt;p&gt;오랜만에 블로그를 쓴다.&lt;/p&gt;

&lt;h2 id=&quot;알고리즘-code-jam&quot;&gt;알고리즘, Code Jam&lt;/h2&gt;
&lt;p&gt;알고리즘과 그리 친하지는 않지만, 아예 손을 놓지 않으려고 매년 Google Code Jam에 참가 신청을 한다.
매년 예선만 통과하자라는 생각으로 크게 욕심부리지 않고 있는데, 다행히 매번 예선은 통과했었다.
작년부터는 파이썬에 좀더 익숙해지기 위해서 파이썬을 이용해서 문제들을 풀고 있다.&lt;/p&gt;

&lt;h2 id=&quot;code-jam-2018-그리고-파이썬&quot;&gt;Code Jam 2018, 그리고 파이썬&lt;/h2&gt;
&lt;p&gt;참가신청만 해놓고 완전히 잊고있다가, 주말에 늦잠자다 일어나서 컴퓨터를 켜보니까 메일이 와있다.
&lt;img src=&quot;/post_assets/2018-04-11/codejam_6hour.png&quot; alt=&quot;6hours left&quot; /&gt;
말이 여섯시간이지… 나는 아침까지 자느라 2시간도 채 안남았다고…
그래도 예선 통과를 위한 점수를 맞추기는 할만할것 같아서 Code Jam 사이트에 접속!&lt;/p&gt;

&lt;p&gt;분명 작년까지는 small input과 large input의 데이터셋에 각각 프로그램을 돌리고,
output 파일을 제출했던 Code jam 형태가 갑자기 online judge 형태로 바뀌었다. 
코드도 페이지 상에서 작성하여 바로 제출할 수 있는 형태로 바뀌었고, 따로 입력 데이터가 주어지지 않는다.
그리고 테스트 파일을 다운받을 수 있는 뭔가 새로운 양식의 문제도 하나 끼어있는 것 같다.
그리고 judge가 버벅이는지 이에 대한 안내 문구까지 출력되고…&lt;/p&gt;

&lt;p&gt;그래도 문제를 둘러보니 1, 2번만 풀면 38점으로 예선을 통과할 수 있을 것 같다.
다행히 시간내에 1, 2번을 다 풀고, 결과를 확인하는데..
2번의 15점 배점 문제가 TIME_LIMIT_EXCEEDED가 나서 실패했다.&lt;/p&gt;

&lt;p&gt;쉽다고 생각한 문제에서 틀린 이후 제일 먼저 든 생각은 Python의 느린 입출력 때문이 아닐까라는 생각이 들었다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;input()&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;sys.stdin.readline()&lt;/code&gt;을 썼어야 하나 등등…
작년까지는 로컬에서 아웃풋 파일을 만들어서 업로드를 하면 되는 형식이라, 
입출력 속도에 민감하게 신경쓰지 않았기도 하고, 코드가 돌아가서 결과만 나오면 된다는 생각이었으니 말이지.&lt;/p&gt;

&lt;p&gt;라운드가 끝난 이후 Analysis를 살펴보고 실제로는 내 구현상의 문제였다는 것을 알게되었다.
‘시간초과가 난 것은 파이썬이 느리기 때문이다.’라고 생각한 내 자신이 민망하기도 하고,
결과적으로는 처음으로 예선 라운드에 떨어지게 되었지만 오히려 더 배운것은 많았던 Code Jam이었다.&lt;/p&gt;

&lt;h2 id=&quot;그리고-jekyll&quot;&gt;그리고 jekyll&lt;/h2&gt;
&lt;p&gt;작년 12월 경 MacOS가 High Sierra로 업데이트 되면서 Ruby 2.0이 지원되지 않게 되었다.
덕분에 Ruby Gem으로 이루어진 Jekyll 또한 먹통이 되었다.
(한동안 블로깅을 멀리한 탓에 내가 jekyll 사용법을 까먹은 줄 알았다…)&lt;/p&gt;

&lt;p&gt;jekyll을 다시 사용하려면 거쳐야 할 방법에 대해서는 아래 링크 참조..
&lt;a href=&quot;[https://github.com/jekyll/jekyll/issues/6637]&quot;&gt;https://github.com/jekyll/jekyll/issues/6637&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Firebase로 동기화되는 Database 사용하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-24T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/07/24/firebase-database-usage</id>
   <content type="html">&lt;h2 id=&quot;firebase-프로젝트-추가&quot;&gt;firebase 프로젝트 추가&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://console.firebase.google.com&quot;&gt;https://console.firebase.google.com&lt;/a&gt;에서 프로젝트 추가
&lt;img src=&quot;/post_assets/2017-07-23/add_done.png&quot; alt=&quot;프로젝트 추가&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;firebase-안드로이드-추가&quot;&gt;firebase 안드로이드 추가&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-07-23/firebase_add.png&quot; alt=&quot;안드로이드 추가&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;google-servicesjson-추가&quot;&gt;google-services.json 추가&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;google-services.json&lt;/code&gt; 파일을 app 영역의 root에 집어넣음. (project 보기)&lt;/p&gt;

&lt;h2 id=&quot;buildgradle-변경&quot;&gt;build.gradle 변경&lt;/h2&gt;

&lt;p&gt;build.gradle(project)에 다음 추가&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;services:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;build.gradle(app) 마지막줄에 다음 줄 추가&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;build.gradle(app)의 dependency에 다음 추가 (database 및 recyclerView 이용을 위한 라이브러리)&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;database:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;11.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;firebaseui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;database:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 프로젝트 sync&lt;/p&gt;

&lt;h2 id=&quot;model-추가&quot;&gt;Model 추가&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Notice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Notice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Notice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;recyclerview-item-layout-추가&quot;&gt;RecyclerView item layout 추가&lt;/h2&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:orientation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;horizontal&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/subjectTextView&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@dimen/text_margin&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:textAppearance=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;?attr/textAppearanceListItem&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/contentTextView&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@dimen/text_margin&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:textAppearance=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;?attr/textAppearanceListItem&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;recyclerview-layout-추가&quot;&gt;RecyclerView layout 추가&lt;/h2&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;android.support.v7.widget.RecyclerView&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:tools=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/tools&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/noticelist&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.ringsterz.picmemo.fragment.ItemFragment&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_marginLeft=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;16dp&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_marginRight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;16dp&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app:layoutManager=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LinearLayoutManager&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tools:context=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.ringsterz.picmemo.fragment.NotificationFragment&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tools:listitem=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@layout/fragment_item&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;변수-선언-및-viewholder-정의-프래그먼트나-엑티비티의-inner-class로-추가&quot;&gt;변수 선언 및 viewHolder 정의 (프래그먼트나 엑티비티의 inner class로 추가)&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DatabaseReference&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mFirebaseDatabaseReference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirebaseRecyclerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Notice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageViewHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mFirebaseAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinearLayoutManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mLayoutManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MessageViewHolder&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RecyclerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ViewHolder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subjectTextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentTextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MessageViewHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subjectTextView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subjectTextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;contentTextView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentTextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;recyclerview와-adapter-설정-및-observer-설정-fragment&quot;&gt;RecyclerView와 adapter 설정 및 observer 설정 (Fragment)&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreateView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LayoutInflater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inflater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewGroup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inflater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fragment_item_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Set the adapter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RecyclerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;recyclerView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RecyclerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mLayoutManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinearLayoutManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;recyclerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLayoutManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mLayoutManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// New child entries&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mFirebaseDatabaseReference&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirebaseDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getReference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mFirebaseAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirebaseRecyclerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Notice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MessageViewHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Notice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fragment_item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MessageViewHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mFirebaseDatabaseReference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;notification&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;populateViewHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageViewHolder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Notice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;viewHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subjectTextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;viewHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentTextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mFirebaseAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerAdapterDataObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RecyclerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AdapterDataObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onItemRangeInserted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positionStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onItemRangeInserted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positionStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noticeCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mFirebaseAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getItemCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastVisiblePosition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mLayoutManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findLastCompletelyVisibleItemPosition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// If the recycler view is initially being loaded or the&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// user is at the bottom of the list, scroll to the bottom&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// of the list to show the newly added message.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastVisiblePosition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positionStart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noticeCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lastVisiblePosition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positionStart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;recyclerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scrollToPosition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positionStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;recyclerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mFirebaseAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rule-설정&quot;&gt;Rule 설정&lt;/h2&gt;
&lt;p&gt;인증하지 않고 데이터를 받으려면 Firebase console에서 아래와 같이 읽기 권한을 준다.&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.read&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.write&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;auth != null&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;firebase-data-형태&quot;&gt;Firebase Data 형태&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-07-24/data.png&quot; alt=&quot;Data형태&quot; /&gt;
위와 같이 db 밑에 child명을 주고 임의의 인스턴스 값 하위에 model에서 정의한 값을 넣어주면 된다.&lt;/p&gt;

&lt;h2 id=&quot;동기화-결과&quot;&gt;동기화 결과&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-07-24/result.png&quot; alt=&quot;Result&quot; /&gt;
DB에서 값을 바꿀 경우 바로 동기화되어 view에 반영된다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Firebase 사용하여 Notification 보내기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-23T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/07/23/firebase-notification-usage</id>
   <content type="html">&lt;h2 id=&quot;firebase-프로젝트-추가&quot;&gt;firebase 프로젝트 추가&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://console.firebase.google.com&quot;&gt;https://console.firebase.google.com&lt;/a&gt;에서 프로젝트 추가
&lt;img src=&quot;/post_assets/2017-07-23/add_done.png&quot; alt=&quot;프로젝트 추가&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;firebase-안드로이드-추가&quot;&gt;firebase 안드로이드 추가&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-07-23/firebase_add.png&quot; alt=&quot;안드로이드 추가&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;google-servicesjson-추가&quot;&gt;google-services.json 추가&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;google-services.json&lt;/code&gt; 파일을 app 영역의 root에 집어넣음. (project 보기)&lt;/p&gt;

&lt;h2 id=&quot;buildgradle-변경&quot;&gt;build.gradle 변경&lt;/h2&gt;

&lt;p&gt;build.gradle(project)에 다음 추가&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;services:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;build.gradle(app) 마지막줄에 다음 줄 추가&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;build.gradle(app)의 dependency에 다음 추가 (Notification 사용 라이브러리)&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;core:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;11.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;messaging:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;11.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 프로젝트 sync&lt;/p&gt;

&lt;h2 id=&quot;firebasemessagingservice-추가&quot;&gt;FirebaseMessagingService 추가&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyFirebaseMessagingService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirebaseMessagingService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;FCM Service&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onMessageReceived&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoteMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;From: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Notification Message Body: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;firebaseinstanceidservice-추가&quot;&gt;FirebaseInstanceIdService 추가&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FirebaseIDService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirebaseInstanceIdService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;FirebaseIDService&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onTokenRefresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Get updated InstanceID token.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refreshedToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirebaseInstanceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Refreshed token: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refreshedToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// TODO: Implement this method to send any registration to your app's servers.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sendRegistrationToServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;refreshedToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendRegistrationToServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Add custom implementation, as needed.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;매니페스트에-서비스-추가&quot;&gt;매니페스트에 서비스 추가&lt;/h2&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;service&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.service.MyFirebaseMessagingService&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.google.firebase.MESSAGING_EVENT&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;service&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.service.FirebaseIDService&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.google.firebase.INSTANCE_ID_EVENT&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;서비스 태그는 애플리케이션 태그 속에 넣으면 된다.&lt;/p&gt;

&lt;h2 id=&quot;notification-보내기&quot;&gt;Notification 보내기&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-07-23/noti_send.png&quot; alt=&quot;알림 보내기&quot; /&gt;
콘솔에서 앱 전체를 대상으로 Notification를 보낸 모습&lt;/p&gt;

&lt;h2 id=&quot;notification-전송-모습&quot;&gt;Notification 전송 모습&lt;/h2&gt;
&lt;p&gt;상태창을 보면 notification이 전송된 것을 볼 수 있다.
&lt;img src=&quot;/post_assets/2017-07-23/noti_bg.png&quot; alt=&quot;백그라운드 알림&quot; /&gt;&lt;/p&gt;

&lt;p&gt;앱이 떠있을때는 로그로 정상 출력되는 것을 볼 수 있다.
&lt;img src=&quot;/post_assets/2017-07-23/noti_sent.png&quot; alt=&quot;포그라운드 알림&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>RecyclerView 사용 패턴</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-22T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/07/22/recyclerview-usage-pattern</id>
   <content type="html">&lt;p&gt;RecyclerView에서는 기본적으로 ViewHolder 패턴을 사용한다.&lt;br /&gt;
ListView보다 사용하기 까다로워 보이지만 사용 패턴을 익히면 그렇지도 않다.&lt;/p&gt;

&lt;h1 id=&quot;recyclerview-사용패턴&quot;&gt;RecyclerView 사용패턴&lt;/h1&gt;

&lt;h2 id=&quot;adapter-생성&quot;&gt;Adapter 생성&lt;/h2&gt;
&lt;p&gt;RecyclerSwipeAdapter&lt;RecyclerViewAdapter.ViewHolder&gt; 를 상속한 아답터를 생성한다.&lt;/RecyclerViewAdapter.ViewHolder&gt;&lt;/p&gt;
&lt;h3 id=&quot;생성자&quot;&gt;생성자&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RecyclerViewAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myDataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mDataset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myDataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;데이터와 context를 전달 받는다.&lt;/p&gt;

&lt;h3 id=&quot;oncreateviewhoder-오버라이드&quot;&gt;OnCreateViewHoder 오버라이드&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewHolder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreateViewHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ViewGroup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LayoutInflater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;recyclerlayout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ViewHolder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 레이아웃을 인플래이트 시킨 후 뷰 홀더에 집어넣는다.&lt;/p&gt;

&lt;h3 id=&quot;getitemcount-오버라이드&quot;&gt;getItemCount 오버라이드&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getItemCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mDataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;viewholder-클래스-생성&quot;&gt;ViewHolder 클래스 생성&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewHolder&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RecyclerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ViewHolder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mTextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ViewHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mTextView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;textview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;뷰홀더 클래스의 생성자 안에서 사용할 뷰들을 바인드 한다.&lt;/p&gt;

&lt;h3 id=&quot;onbindviewholder-오버라이드&quot;&gt;onBindViewHolder 오버라이드&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onBindViewHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewHolder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;holder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Phrase&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mDataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;holder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mTextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;RecyclerView의 각각의 뷰가 표시될 때 처리할 내용을 작성한다.&lt;/p&gt;

&lt;h2 id=&quot;adapter-설정&quot;&gt;Adapter 설정&lt;/h2&gt;
&lt;p&gt;RecyclerView에 .setAdapter를 통해 아답터를 설정한다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Google Play App Signing으로 업로드 시 apk 업로드 안될 때</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-21T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/07/21/android-app-sigining-upload-problem</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/post_assets/2017-07-21/app_signing.png&quot; alt=&quot;App Signing&quot; /&gt;
위와 같이 Google Play App Signing을 한번 누르니 다시 돌이킬 수도 없고,&lt;br /&gt;
APK를 업로드를 하려니 다음의 화면이 출력되며 apk 업로드도 안된다.
&lt;img src=&quot;/post_assets/2017-07-21/upload_error.png&quot; alt=&quot;apk 업로드 불가&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;문제-원인&quot;&gt;문제 원인&lt;/h1&gt;
&lt;p&gt;Signed apk를 만들 때 Signature Vesion의 V1을 체크하지 않으면 .jar 파일이 생성되지 않아,&lt;br /&gt;
Jar_sig_no라며 jar signature가 없다는 메시지를 뱉는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/post_assets/2017-07-21/bulid_jar.png&quot; alt=&quot;apk 빌드 설정&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Signature Vesion을 둘다 체크하고 다시 Signed APK를 생성하면 잘 업로드 된다.
&lt;img src=&quot;/post_assets/2017-07-21/uploaded.png&quot; alt=&quot;업로드 완료&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>안드로이드 라이센스 라이브러리 사용하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-20T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/07/20/android-lvl-library-using</id>
   <content type="html">&lt;p&gt;앱을 유료로 마켓에 업로드하려 할때, apk 파일을 통해 앱을 설치하는게 우려된다면,&lt;br /&gt;
Google의 라이센싱 라이브러리를 사용하면 apk파일이 구매한 것인지 검증해 준다.&lt;/p&gt;

&lt;h1 id=&quot;설치&quot;&gt;설치&lt;/h1&gt;
&lt;p&gt;Android SDK Tools에서 라이센싱 라이브러리를 설치한다.
&lt;img src=&quot;/post_assets/2017-07-20/add_lib.png&quot; alt=&quot;라이브러리 설치&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;라이브러리-추가&quot;&gt;라이브러리 추가&lt;/h1&gt;
&lt;p&gt;안드로이드 스튜디오에서 File -&amp;gt; New -&amp;gt; Import Module을 선택한 후,&lt;br /&gt;
설치한 라이센스 소스 디렉토리의 AndroidManifest.xml을 선택한다.
&lt;img src=&quot;/post_assets/2017-07-20/import_module.png&quot; alt=&quot;라이브러리 추가&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;계정-설정&quot;&gt;계정 설정&lt;/h1&gt;
&lt;p&gt;Google Play console에서 라이센스 테스트를 수행할 계정을 선택한다.&lt;br /&gt;
이 계정으로 기기에 로그인 해야 한다.
&lt;img src=&quot;/post_assets/2017-07-20/test_response.png&quot; alt=&quot;계정설정&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;라이센스-키-설정&quot;&gt;라이센스 키 설정&lt;/h1&gt;
&lt;p&gt;Google Play console에서 개별 앱 페이지로 들어가서 라이센스 키를 복사한다.&lt;br /&gt;
&lt;img src=&quot;/post_assets/2017-07-20/license_key.png&quot; alt=&quot;라이센스 키 설정&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;라이브러리-포함하여-빌드하도록-설정&quot;&gt;라이브러리 포함하여 빌드하도록 설정&lt;/h1&gt;
&lt;p&gt;app의 build.gradle에 다음 구문을 추가한다
&lt;code class=&quot;highlighter-rouge&quot;&gt;compile project(path: ':library')&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;라이브러리-사용&quot;&gt;라이브러리 사용&lt;/h1&gt;
&lt;p&gt;사용법은 딱히 까다롭지 않아 &lt;a href=&quot;https://developer.android.com/google/play/licensing/adding-licensing.html#imports&quot;&gt;Android docs&lt;/a&gt;의 링크로 대체하고, 일부 부분만 설명한다.&lt;/p&gt;

&lt;h2 id=&quot;고유-디바이스-아이디-처리&quot;&gt;고유 디바이스 아이디 처리&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AESObfuscator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SALT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPackageName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deviceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;부분에서 고유한 deviceId를 처리해줘야 한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Secure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContentResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Secure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ANDROID_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;장치 고유값을 가져오는 것이 생각보다 쉽지않은데, 그냥 단순하게 처리하려면 위와같이 하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;에러처리&quot;&gt;에러처리&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-07-20/error.png&quot; alt=&quot;에러 처리&quot; /&gt;
라이브러리의 intent 사용 방법 떄문에 에러가 발생한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Binding to licensing service.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mContext&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bindService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Y29tLmFuZHJvaWQudmVuZGluZy5saWNlbnNpbmcuSUxpY2Vuc2luZ1NlcnZpY2U=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))),&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ServiceConnection.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BIND_AUTO_CREATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mPendingChecks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Could not bind to service.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;handleServiceConnectionError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SecurityException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applicationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LicenseCheckerCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ERROR_MISSING_PERMISSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base64DecoderException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;라이브러리의 위 코드를 아래와 같이 수정한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Binding to licensing service.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceIntent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Y29tLmFuZHJvaWQudmVuZGluZy5saWNlbnNpbmcuSUxpY2Vuc2luZ1NlcnZpY2U=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;serviceIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.android.vending&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bindService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ServiceConnection.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BIND_AUTO_CREATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mPendingChecks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Could not bind to service.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;handleServiceConnectionError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SecurityException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applicationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LicenseCheckerCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ERROR_MISSING_PERMISSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base64DecoderException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;또-다른-에러&quot;&gt;또 다른 에러&lt;/h2&gt;
&lt;p&gt;LicenseCheckerCallback에서 applicationError가 호출되며 에러코드 3이 찍히는 경우가 있다.&lt;br /&gt;
이는 ERROR_NOT_MARKET_MANAGED로 마켓에 앱을 올리지 않았을때 반환되는 코드인데, 처리할 필요 없다.&lt;br /&gt;
정상적인 시나리오에서는 allow나 dontallow가 호출되기 때문인데, 자세한 이유를 알고 싶다면 &lt;a href=&quot;https://stackoverflow.com/questions/10377325/how-do-you-deal-with-licensecheckercallback-error-not-market-managed-error-code&quot;&gt;여기&lt;/a&gt;서 확인할 것&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>안드로이드 런처 아이콘 해상도별로 생성하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-19T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/%EB%94%94%EC%9E%90%EC%9D%B8/2017/07/19/android-launcher-icon-generator</id>
   <content type="html">&lt;h1 id=&quot;안드로이드-런처-아이콘-생성하기&quot;&gt;안드로이드 런처 아이콘 생성하기&lt;/h1&gt;
&lt;p&gt;안드로이드 런처 아이콘을 해상도별로 작업하는 것은 귀찮은 일이지만,&lt;br /&gt;
내가 귀찮은 것은 남에게도 귀찮은 법.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://romannurik.github.io/AndroidAssetStudio/icons-launcher.html&quot;&gt;AndroidAssetStudio&lt;/a&gt;를 통해 여러가지 해상도별로 쉽게 뽑아낼 수 있다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>HTML 컬러코드 기본 조합</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-18T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/%EB%94%94%EC%9E%90%EC%9D%B8/2017/07/18/html-colorcode-basic-combination</id>
   <content type="html">&lt;h1 id=&quot;color-picker를-위한-기본-색상-조합&quot;&gt;Color Picker를 위한 기본 색상 조합&lt;/h1&gt;
&lt;p&gt;색상 선택기를 만드는데 기본 조합이 필요하다면 다음의 색상 조합을 이용한다&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: center&quot;&gt;색상&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;이름&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;HEX&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; background-color:#ff0000;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Red&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;#FF0000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; background-color:#800000;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Maroon&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;#800000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; background-color:#FFFF00;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Yellow&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;#FFFF00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; background-color:#808000;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Olive&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;#808000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; background-color:#00FF00;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Lime&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;#00FF00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; background-color:#008000;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Green&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;#008000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; background-color:#00FFFF;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Aqua&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;#00FFFF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; background-color:#008080;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Teal&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;#008080&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td style=&quot;text-align: center; background-color:#0000FF;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Blue&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;#0000FF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; background-color:#000080;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Navy&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;#000080&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td style=&quot;text-align: center; background-color:#FF00FF;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Fuchsia&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;#FF00FF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; background-color:#800080;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Purple&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;#800080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; background-color:#FFFFFF;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;White&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;#FFFFFF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; background-color:#C0C0C0;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Silver&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;#C0C0C0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; background-color:#808080;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Gray&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;#808080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; background-color:#000000;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Black&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;#000000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;

&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>Mac Finder에서 파일 이름으로 검색하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-17T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//mac%20%EC%82%AC%EC%9A%A9%ED%8C%81/2017/07/17/mac-finder-search-by-name</id>
   <content type="html">&lt;h2 id=&quot;상황&quot;&gt;상황&lt;/h2&gt;
&lt;p&gt;다음 그림과 같이 한 폴더에 많은 파일이 있다.&lt;br /&gt;
&lt;img src=&quot;/post_assets/2017-07-17/search_list.png&quot; alt=&quot;서치 리스트&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 중 heroku라는 글자를 포함한 파일을 찾으려 한다.&lt;/p&gt;

&lt;h2 id=&quot;오른쪽-위의-검색-창-사용&quot;&gt;오른쪽 위의 검색 창 사용&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-07-17/search_finder.png&quot; alt=&quot;파인더&quot; /&gt;
검색 실패&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/post_assets/2017-07-17/search_by_name.png&quot; alt=&quot;파인더 이름검색&quot; /&gt;
여전히 검색 실패&lt;/p&gt;

&lt;p&gt;Spotlight를 통한 검색에서도 해당 파일을 찾지 못했다.&lt;/p&gt;

&lt;h2 id=&quot;검색-방법&quot;&gt;검색 방법&lt;/h2&gt;
&lt;p&gt;Finder에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘&lt;/code&gt;(커맨드)+&lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt;를 입력한다.&lt;br /&gt;
새롭게 뜨는 검색창에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;이름&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;다음을 포함&lt;/code&gt;을 선택하고 검색한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/post_assets/2017-07-17/search_solution.png&quot; alt=&quot;파인더 해결방법&quot; /&gt;
이번에는 잘 검색되었다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django 프로젝트 Heroku 릴리즈 - (최종 수정)</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-16T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/07/16/django-project-heroku-최종</id>
   <content type="html">&lt;p&gt;할때마다 고생이라 한번 더 정리한다.&lt;br /&gt;
보안키 같은것 숨기지 않고, 그냥 가장 빠르게 설정하는 방법이다.&lt;br /&gt;
CLI 등 툴 인스톨은 기존 포스팅을 참고하자.&lt;/p&gt;

&lt;h2 id=&quot;gunicorn-추가-장고-기본-폴더-구성-시&quot;&gt;gunicorn 추가 (장고 기본 폴더 구성 시)&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install gunicorn&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;procfile-추가&quot;&gt;Procfile 추가&lt;/h2&gt;
&lt;p&gt;프로젝트 루트에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Procfile&lt;/code&gt;을 추가하고 다음 내용을 추가&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;web: gunicorn myproject.wsgi --log-file -&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;runtimetxt-추가&quot;&gt;runtime.txt 추가&lt;/h2&gt;
&lt;p&gt;프로젝트 루트에 &lt;code class=&quot;highlighter-rouge&quot;&gt;runtime.txt&lt;/code&gt;을 추가하고 다음 내용 추가 
&lt;code class=&quot;highlighter-rouge&quot;&gt;python-3.6.1&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;dj-database-url-추가&quot;&gt;dj-database-url 추가&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install dj-database-url&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;파일에 다음 내용 추가&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dj_database_url&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;db_from_env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dj_database_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn_max_age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_from_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;whitenoise-추가&quot;&gt;whitenoise 추가&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install whitenoise&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;에 다음 내용을 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;STATIC_ROOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASE_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'staticfiles'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;STATICFILES_STORAGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'whitenoise.django.GzipManifestStaticFilesStorage'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wsgi.py&lt;/code&gt;에 다음 내용을 추가&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.core.wsgi import get_wsgi_application
from whitenoise.django import DjangoWhiteNoise

application = get_wsgi_application()
application = DjangoWhiteNoise(application)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;psycopg2-추가&quot;&gt;psycopg2 추가&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install psycopg2&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;requirementstxt-생성&quot;&gt;requirements.txt 생성&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; 입력&lt;/p&gt;

&lt;h2 id=&quot;allowed-host-추가&quot;&gt;ALLOWED Host 추가&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;ALLOWED_HOSTS = ['*']&lt;/code&gt;를 추가&lt;/p&gt;

&lt;h2 id=&quot;debug-끄기&quot;&gt;DEBUG 끄기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;DEBUG = False&lt;/code&gt; 설정&lt;/p&gt;

&lt;h2 id=&quot;heroku-앱-생성&quot;&gt;Heroku 앱 생성&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku create&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-commit-하고-heroku로-push&quot;&gt;Git commit 하고 heroku로 push&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;heroku settings update&quot;&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git push heroku master&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;db가-생성&quot;&gt;db가 생성&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku run python manage.py migrate&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;슈퍼유저-생성&quot;&gt;슈퍼유저 생성&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku run python manage.py createsuperuser&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;중요&quot;&gt;중요&lt;/h1&gt;
&lt;p&gt;SECRET_KEY를 숨기려면 기존에 작성한 포스팅을 참고할 것.&lt;br /&gt;
위의 방법은 가장 빠르게 릴리즈만을 위한 방법임&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>안드로이드 개발시에만 로그 출력하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-15T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/07/15/android-logging-debug-only</id>
   <content type="html">&lt;h1 id=&quot;사용씬&quot;&gt;사용씬&lt;/h1&gt;
&lt;p&gt;디버그로 빌드할때만 로그가 출력되고, release로 빌드했을때는 로그가 출력되지 않도록 하려고 한다.&lt;/p&gt;

&lt;h1 id=&quot;사용-방법&quot;&gt;사용 방법&lt;/h1&gt;
&lt;p&gt;Log 클래스의 Wrapper class를 생성한 후, &lt;code class=&quot;highlighter-rouge&quot;&gt;BuildConfig.BUILD_TYPE&lt;/code&gt; 값을 체크하여 로그를 출력한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogUtils&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOGGING_ENABLED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BUILD_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;release&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LOGD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOGGING_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isLoggable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LOGD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOGGING_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isLoggable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LOGV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOGGING_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isLoggable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERBOSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LOGV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOGGING_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isLoggable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERBOSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LOGI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOGGING_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LOGI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOGGING_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LOGW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LOGW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LOGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LOGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LogUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;참고로 INFO 레벨 미만은 Log.isLoggable을 이용해 로그가 출력 가능한지 확인해줘야 한다.&lt;br /&gt;
디폴트 로그 레벨 출력값은 Info 이상이다.&lt;/p&gt;

&lt;h1 id=&quot;이스터에그-logwtf&quot;&gt;이스터에그? Log.wtf&lt;/h1&gt;
&lt;p&gt;API 문서를 참조하다. 로그레벨 wtf이 있다는 것을 알게되었다.&lt;br /&gt;
“What a Terrible Failure: Report a condition that should never happen.”라고 설명하고 있지만…&lt;br /&gt;
우리는 모두 진실을 알고있다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>안드로이드 SQLite에 대량의 레코드 삽입하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-14T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/2017/07/14/sqlite3-large-file-insert</id>
   <content type="html">&lt;h1 id=&quot;사용씬&quot;&gt;사용씬&lt;/h1&gt;
&lt;p&gt;안드로이드의 로컬 저장소인 SQLite에 대용량의 레코드를 한번에 삽입하려 한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&amp;lt;Data&amp;gt; data&lt;/code&gt; 안에 4만개의 레코드가 있다.&lt;/p&gt;

&lt;h1 id=&quot;통상정인-방법&quot;&gt;통상정인 방법&lt;/h1&gt;
&lt;h2 id=&quot;sqliteopenhelper-내-메소드&quot;&gt;SqliteOpenHelper 내 메소드&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insertData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ContentValues&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COLUMN_A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COLUMN_B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COLUMN_B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getWritableDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TABLE_A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;하나의 레코드를 삽입하는 메소드를 정의했다.&lt;/p&gt;

&lt;h2 id=&quot;insertdata-사용&quot;&gt;insertData 사용&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dbHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;insertData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;for 문을 돌려서 Data를 삽입한다.&lt;/p&gt;

&lt;h1 id=&quot;문제점&quot;&gt;문제점&lt;/h1&gt;
&lt;p&gt;만약 4만개의 레코드를 한번에 저장하려면 위의 방법으로는 대략 1분이 넘어간다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nanoTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dbHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;insertData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finishTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nanoTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Write to DB takes: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finishTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; seconds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 시간을 확인해 보았을 때, 94.216414초가 걸렸다.&lt;/p&gt;

&lt;h1 id=&quot;원인&quot;&gt;원인&lt;/h1&gt;
&lt;p&gt;이는 SQlite가 하나의 레코드를 생성할때 Transaction을 수행하며 저널 파일을 생성하기 때문인데,&lt;br /&gt;
위의 방법으로는 4만여개의 저널파일을 생성하며 DB의 삽입 속도가 느려지게 된다.&lt;/p&gt;

&lt;h1 id=&quot;해결책&quot;&gt;해결책&lt;/h1&gt;
&lt;p&gt;하나의 Transaction으로 처리해 4만여개의 레코드를 한번에 삽입하며 저널파일을 한번만 생성하게 되면 된다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insertAllDatas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SQLiteDatabase&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getWritableDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beginTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ContentValues&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COLUMN_A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COLUMN_B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COLUMN_B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TABLE_A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTransactionSuccessful&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 방법으로 4만개의 레코드를 삽입할 때에는 2.813887초가 걸렸다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>안드로이드 Activity에서 Fragment로부터 데이터 전달 받기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-13T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/07/13/android-fragment-return-activity</id>
   <content type="html">&lt;h1 id=&quot;사용씬&quot;&gt;사용씬&lt;/h1&gt;
&lt;p&gt;액티비티에서 Fragment Transaction을 이용하여 DialogFragment 등을 호출했다.&lt;br /&gt;
이 Dialog가 종료시에 Activity가 결과값을 돌려받고자 한다.&lt;/p&gt;

&lt;h1 id=&quot;문제점&quot;&gt;문제점&lt;/h1&gt;
&lt;p&gt;Fragment - Fragment 면 &lt;code class=&quot;highlighter-rouge&quot;&gt;setTargetFragment&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;onActivityResult&lt;/code&gt;를 통해 인텐트로 전달가능하다.&lt;br /&gt;
하지만 Activity가 Fragment를 호출했을때는 Dialog가 종료 시 &lt;code class=&quot;highlighter-rouge&quot;&gt;onActivityResult&lt;/code&gt;가 호출되지 않는다.&lt;/p&gt;

&lt;h1 id=&quot;해결책&quot;&gt;해결책&lt;/h1&gt;
&lt;p&gt;액티비티에서 인터페이스를 생성하여 구현하거나 기타등등 해결법이 있지만 제일 간단한 방법은…&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;액티비티에 public 메소드를 구현한다.&lt;/li&gt;
  &lt;li&gt;DialogFragment에서 다음과 같이 액티비티의 메소드를 인자와 같이 호출한다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;엄밀히 따지면 데이터 전달은 아니다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>안드로이드 startActivity 시에 기존 activity 제거하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-12T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/07/12/android-activity-close</id>
   <content type="html">&lt;h1 id=&quot;인텐트-전달하며-기존-액티비티-제거하기&quot;&gt;인텐트 전달하며 기존 액티비티 제거하기&lt;/h1&gt;
&lt;p&gt;액티비티에서 액티비티로 갈때에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;finish();&lt;/code&gt; 를 호출하면 간단하다.&lt;/p&gt;

&lt;p&gt;비동기 태스크와 같이 액티비티가 아닌 곳에서 기존 액티비티를 없애려면 다음과 같이 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFlags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FLAG_ACTIVITY_NEW_TASK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FLAG_ACTIVITY_CLEAR_TASK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FLAG_ACTIVITY_CLEAR_TOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;사용법&quot;&gt;사용법&lt;/h1&gt;
&lt;p&gt;Splash 화면 만들어놓고 비동기로 작업 해놓고 그 작업이 다 완료되면 다음 액티비티로 넘어가며,&lt;br /&gt;
Back Stack에 Splash Activity가 남지 않게 하려면 사용하면 된다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>안드로이드 레이아웃 XML에서 위젯에 물결 이펙트 넣기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-11T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/07/11/android-layout-ripple-effect</id>
   <content type="html">&lt;p&gt;요즘 바빠서 블로깅하기가 힘들다.&lt;br /&gt;
그냥 간단한 것이라도 남기기로 한다.&lt;/p&gt;

&lt;h1 id=&quot;xml에-물결-이펙트-넣기&quot;&gt;XML에 물결 이펙트 넣기&lt;/h1&gt;
&lt;p&gt;위젯이 터치 이벤트에 반응하여 움직이는 것처럼 보이게 하려면 위젯의 XML attribute에&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;android:background=&quot;?attr/selectableItemBackgroundBorderless&quot; &lt;/code&gt;
를 추가하면 된다.&lt;/p&gt;

&lt;p&gt;이펙트 크기는 padding값을 적절히 조절하면 된다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>안드로이드 액티비티 전체화면 만들기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-10T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/07/10/android-application-fullscreen</id>
   <content type="html">&lt;p&gt;요즘 바빠서 블로깅하기가 힘들다.&lt;br /&gt;
그냥 간단한 것이라도 남기기로 한다.&lt;/p&gt;

&lt;h1 id=&quot;툴바-및-상태바-숨기기&quot;&gt;툴바 및 상태바 숨기기&lt;/h1&gt;

&lt;p&gt;아래 코드를 onCreate의 &lt;code class=&quot;highlighter-rouge&quot;&gt;setContentView&lt;/code&gt; 전에 해주면 된다.&lt;br /&gt;
사실 Android Studio에서 자동으로 생성해주는 FullScreenActivity에서도 볼 수 있는 내용이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;getWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDecorView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSystemUiVisibility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SYSTEM_UI_FLAG_LAYOUT_STABLE&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SYSTEM_UI_FLAG_HIDE_NAVIGATION&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SYSTEM_UI_FLAG_FULLSCREEN&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SYSTEM_UI_FLAG_IMMERSIVE_STICKY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>이클립스 프로젝트 안드로이드 스튜디오로 마이그레이션 할 때 주의점</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-09T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/07/09/eclipse-android-studio-migration</id>
   <content type="html">&lt;h1 id=&quot;주의점-1&quot;&gt;주의점 1&lt;/h1&gt;
&lt;p&gt;그냥 Open existing project 하면 에로사항이 꽃핀다.&lt;br /&gt;
import project (Eclipse ADT, Gradle, etc.) 메뉴를 이용할 것&lt;/p&gt;

&lt;h1 id=&quot;주의점-2&quot;&gt;주의점 2&lt;/h1&gt;
&lt;p&gt;때로는 이클립스 프로젝트 자체에서 수정해야 될 필요성이 있다.&lt;br /&gt;
이클립스를 지워버렸으면 좀더 귀찮아진다…&lt;/p&gt;

&lt;h1 id=&quot;주의점-3&quot;&gt;주의점 3&lt;/h1&gt;
&lt;p&gt;임포트 후에 라이브러리 설정을 잘 해줘야 한다.&lt;br /&gt;
support-library 관련 충돌이 많이 일어난다.&lt;br /&gt;
빌드버전/컴파일 버전/서포트 라이브러리 버전 등을 잘 맞춰야 한다.&lt;/p&gt;

&lt;h1 id=&quot;주의점-4&quot;&gt;주의점 4&lt;/h1&gt;
&lt;p&gt;임포트가 끝난후에 Android Studio 프로젝트 루트 폴더에 res 폴더 및 src 폴더가 남아있다.&lt;br /&gt;
한마디로 &lt;code class=&quot;highlighter-rouge&quot;&gt;app/src/main&lt;/code&gt; 과 이중으로 폴더가 남아있는 것…&lt;br /&gt;
이때문에 xml 레이아웃 수정시에 &lt;code class=&quot;highlighter-rouge&quot;&gt;URI is not registered ( Setting | Project Settings | Schemas and DTDs&lt;/code&gt; 가 출력되며,
&lt;code class=&quot;highlighter-rouge&quot;&gt;xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&lt;/code&gt; 구문에 계속 빨간줄이 가있고, 레이아웃 프리뷰가 제대로 출력이 안된다.&lt;br /&gt;
해당 폴더들을 삭제하면 해결된다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>돈을 배우다 - 좋은 책의 조건</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-08T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EB%8F%85%EC%84%9C/%EB%8B%A8%EC%83%81/2017/07/08/learning-money</id>
   <content type="html">&lt;p&gt;오랫만에 교보문고에 들렀다.&lt;br /&gt;
먹고살기 힘든 사회 때문인지 인간의 탐욕 때문인지 돈버는 방법에 대한 책이 많기도 하다.&lt;br /&gt;
부동산으로 혹은 주식으로 혹은 사업으로 몇억 벌기 등등…&lt;br /&gt;
책이름도 자극적이라 한번쯤은 눈이 가게 된다.&lt;br /&gt;
타고난 금수저가 아닌 이상 누군들 돈 걱정이 없겠냐만 이거해라 저거해라하는 책들과 방법론만을 늘어놓는 책들은 좋아하지 않는터라 책을 집어들진 않았다.&lt;/p&gt;

&lt;h1 id=&quot;돈을-배우다&quot;&gt;돈을 배우다&lt;/h1&gt;
&lt;p&gt;얼마전에 도서관에서 빌린 책 중 한권이다. 돈에 대해 관점을 제시하고 분석하는 방식이 마음에 들었다.&lt;br /&gt;
부제에는 우리가 알아야 할 새로운 돈의 프레임이라는 제목으로 거창하게 소개하고 있지만,&lt;br /&gt;
사실 책 자체의 내용은 결국 잘 벌고, 잘 쓰고, 잘 불리는 것에 대한 기본적인 이야기다.&lt;br /&gt;
그럼에도 불구하고 이 책이 마음에 들었던 점은 기본적인 것들을 그저 소개하지 않고 배경과 필자의 관점을 적당히&lt;br /&gt;
잘 섞어서 이야기를 풀었다는 점이었다.&lt;/p&gt;

&lt;h1 id=&quot;좋은-책의-조건&quot;&gt;좋은 책의 조건&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;나는 이 분야의 전문가이고 잘 아니까 넌 그냥 잘 새겨들어&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;라고 말하는 책들을 매우 싫어한다. 내가 맹목적 권위라는 것 자체에 반감이 있기 때문인지도 모르겠지만&lt;br /&gt;
전문가라 해도 한낱 인간인데 종교처럼 일방적으로 맹신하는 태도는 잘 받아들여지지 않는다.&lt;br /&gt;
작중화자와의 건설적 토론이나 비판적 사고 등등 온갖 국어 교과서에 나올법한 수식어를 제외하더라도,&lt;br /&gt;
나는 뼛속깊이 엔지니어인지 사고의 작동원리(?)에 대해 이해가가지 않으면 결론을 잘 신뢰하지 않는다.&lt;/p&gt;

&lt;p&gt;결론은 내게 있어서 좋은 책이란&lt;br /&gt;
필자의 사고 전개과정을 드러내면서 그럴듯한 주장을 펼쳐, 그 결론이 내 생각과 일치하든 그렇지 않든 생각할 거리를 던져주는 책인 것 같다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>일일커밋, 일일 블로깅</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-07T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EB%8B%A8%EC%83%81/2017/07/07/one-day-one-commit</id>
   <content type="html">&lt;p&gt;1일 1커밋과 1일 1블로깅을 한달 넘계 계속해왔다.&lt;br /&gt;
7/3일 하루가 빠져있는데, 이날 커밋한 리포지토리를 삭제했기 때문에 발생한 일이다.&lt;br /&gt;
한칸이 비어있는 것이 못내 아쉽기는 하지만 자신과의 약속은 깨지 않았다는 것에 만족한다.&lt;br /&gt;
한달넘게 일일커밋과 블로깅을 하며 느낀점은…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;글쓰기도 익숙해지면 점점 빨라진다.&lt;br /&gt;
처음에는 이런식이면 어떻게 하나 싶었던 문서화도 점점 할수록 익숙해지고 빨라진다.&lt;/li&gt;
  &lt;li&gt;어거지로라도 한줄이라도 코딩을 한다.&lt;br /&gt;
필(?)받을때 몰아서 하고, 안될때는 잘 안되는 편이라 기복이 좀 있는데 이럴때 억지로라도 시작하면&lt;br /&gt;
어느새 평균정도 능률은 나오기도 한다.&lt;br /&gt;
다만 별의미없는 내용을 12시가 넘기전에 커밋하는 치팅(?)은 반성해야겠다.&lt;/li&gt;
  &lt;li&gt;하루를 반성하고 돌아보는 계기가 된다.
그날 정리할 것이 없으면 뭔가 한 것이 없다는 생각이 든다. 꾸준한 정진의 발판이 될 것 같다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;나름 장단이 있지만 현재로서는 장점이 더 많은 것 같다. 좀 더 계속해보자.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>안드로이드에 Facebook Graph API 사용하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-06T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/07/06/facebook-sdk-android-graph</id>
   <content type="html">&lt;h1 id=&quot;graph-api-사용-flow&quot;&gt;Graph API 사용 Flow&lt;/h1&gt;
&lt;h2 id=&quot;인증-후-accesstoken-획득&quot;&gt;인증 후 AccessToken 획득&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AccessToken accessToken = AccessToken.getCurrentAccessToken();&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;graph-request-생성&quot;&gt;Graph Request 생성&lt;/h2&gt;
&lt;p&gt;accessToken, URL endpoint, params, HttpMethod, Callback method를 인자로 생성&lt;br /&gt;
이후 &lt;code class=&quot;highlighter-rouge&quot;&gt;executeAsync()&lt;/code&gt;로 비동기 실행&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;예제 1 - 사용자 이름 얻기&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;GraphRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GraphRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newMeRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GraphRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GraphJSONObjectCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;JSONObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;GraphResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mTextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Logged in as:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSONException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;je&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;No key provided.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;id,name,link&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setParameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeAsync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;예제 2 - 페이스북 페이지에 게시물 포스팅&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GraphRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AccessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCurrentAccessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/912605208889540/feed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 페이지 ID&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GraphRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GraphResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getBaseContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Write Complete&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_SHORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeAsync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;예제 3 - 페이스북 페이지 게시물 가져오기&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GraphRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AccessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCurrentAccessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;/912605208889540/feed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GraphRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GraphResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;JSONObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getJSONObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;JSONArray&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;jsonArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getJSONArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSONException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;je&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Error fetching JSON&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeAsync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;기타-확인할-것&quot;&gt;기타 확인할 것&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Facebook 개발자 페이지에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;앱 검수&lt;/code&gt; 항목에서 쓰기 권한 검수 받기&lt;/li&gt;
  &lt;li&gt;Facebook 개발자 페이지에서 앱 공개해서 SANDBOX에서 실행되지 않도록 할 것&lt;br /&gt;
(앱 공개 안하면 안드로이드 앱을 통해 Publishing한 포스트들이 다른 사람에게 보이지 않음)&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>안드로이드에 Facebook 로그인 연동하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-05T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/07/05/facebook-sdk-android-login</id>
   <content type="html">&lt;h1 id=&quot;facebook-sdk-연동하기&quot;&gt;Facebook SDK 연동하기&lt;/h1&gt;
&lt;p&gt;한동안 Facebook SDK를 쓸일이 없다가 다시 기회가 생겨 간단한 샘플을 제작해 보았다.&lt;br /&gt;
잊어버리지 않게 정리해두려 한다.&lt;/p&gt;

&lt;h2 id=&quot;dependency-추가&quot;&gt;Dependency 추가&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;compile 'com.facebook.android:facebook-android-sdk:[4,5)'&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;에 추가한다.&lt;/p&gt;

&lt;h2 id=&quot;manifest-수정&quot;&gt;Manifest 수정&lt;/h2&gt;
&lt;p&gt;인터넷 엑서스가 필요하므로 권한을 추가해야 한다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.INTERNET&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;meta Data를 추가해 어플리케이션 ID를 넣고,&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta-data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.facebook.sdk.ApplicationId&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@string/facebook_app_id&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Facebook Activity도 추가해야 한다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.facebook.FacebookActivity&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:configChanges=&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;keyboard|keyboardHidden|screenLayout|screenSize|orientation&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:label=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@string/app_name&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;layout-수정&quot;&gt;Layout 수정&lt;/h2&gt;
&lt;p&gt;페이스북에서 제공하는 기본 로그인 버튼을 이용하려면, 레이아웃에 다음을 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;com.facebook.login.widget.LoginButton&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/login_button&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_gravity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center_horizontal&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_marginTop=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;30dp&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_marginBottom=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;30dp&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;activity-수정&quot;&gt;Activity 수정&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;LoginButton의 참조를 얻은 후&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;final LoginButton mLoginBtn = (LoginButton) findViewById(R.id.login_button);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;읽기 퍼미션을 준다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;mLoginBtn.setReadPermissions(&quot;public_profile&quot;);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;쓰기 퍼미션은 추후 다음과 같이 LoginManager를 통해 준다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;LoginManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logInWithPublishPermissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;publish_actions&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;LoginButton에 콜백을 등록하고, 필요한 메소드를 오버라이드 한다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mLoginBtn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mCallbackManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FacebookCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoginResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onSuccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoginResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loginResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FacebookException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;onActivityResult를 통해 CallbackManager에 결과를 전달한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;mCallbackManager.onActivityResult(requestCode, resultCode, data);&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>텐서플로 라이브러리 안드로이드에 사용하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-04T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D/2017/07/04/tensorflow-android-usage</id>
   <content type="html">&lt;h1 id=&quot;빌드된-라이브러리-다운로드&quot;&gt;빌드된 라이브러리 다운로드&lt;/h1&gt;
&lt;p&gt;상세 설정은 &lt;a href=&quot;https://minyoungjung.github.io/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D/2017/07/03/tensorflow-library-build/&quot;&gt;지난 포스팅&lt;/a&gt; 참조.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ci.tensorflow.org/view/Nightly/job/nightly-android/&quot;&gt;Project nightly-android&lt;/a&gt;에서 최신 빌드된 버전 이미지의 &lt;code class=&quot;highlighter-rouge&quot;&gt;libandroid_tensorflow_inference_java.jar&lt;/code&gt;&lt;br /&gt;
파일 다운로드,  &lt;code class=&quot;highlighter-rouge&quot;&gt;native&lt;/code&gt; 폴더의 &lt;code class=&quot;highlighter-rouge&quot;&gt;libtensorflow_inference.so&lt;/code&gt;도 zip 파일로 압축해서 다운로드&lt;/p&gt;

&lt;h1 id=&quot;안드로이드-프로젝트-생성&quot;&gt;안드로이드 프로젝트 생성&lt;/h1&gt;
&lt;p&gt;텐서플로를 사용할 안드로이드 프로젝트 생성&lt;/p&gt;

&lt;h1 id=&quot;라이브러리-추가&quot;&gt;라이브러리 추가&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/libs/&lt;/code&gt; 폴더에 zip 파일로 압축한 폴더를 풀어서 복사&lt;br /&gt;
동일 폴더안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;libandroid_tensorflow_inference_java.jar&lt;/code&gt; 또한 복사&lt;br /&gt;
트리 구조는 아래와 같음
&lt;img src=&quot;/post_assets/2017-07-04/tree.png&quot; alt=&quot;폴더구조&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;buildgradle-수정&quot;&gt;build.gradle 수정&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle (Module: app)&lt;/code&gt; 파일의 android 항목 안에 native 라이브러리 경로 추가&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sourceSets {
    main {
        jniLibs.srcDirs = ['libs']
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;메인-액티비티-수정&quot;&gt;메인 액티비티 수정&lt;/h1&gt;
&lt;h2 id=&quot;라이브러리-로드&quot;&gt;라이브러리 로드&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadLibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tensorflow_inference&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;oncreate-수정&quot;&gt;onCreate 수정&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Tensor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;floatValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;간단히 Tensor를 하나 생성한 후 값을 빼내서 출력함.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>텐서플로 소스로부터 안드로이드 라이브러리 빌드하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-03T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D/2017/07/03/tensorflow-library-build</id>
   <content type="html">&lt;h1 id=&quot;텐서플로-repository-clone&quot;&gt;텐서플로 repository clone&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone --recurse-submodules https://github.com/tensorflow/tensorflow.git&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;android-ndk-설치&quot;&gt;Android NDK 설치&lt;/h1&gt;
&lt;p&gt;텐서플로의 core 모듈이 c++로 이루어져 있고, 이를 이용하기 위해서는 JNI가 필요.&lt;br /&gt;
&lt;del&gt;Android Studio의 Preference -&amp;gt; Appearance &amp;amp; Behavior -&amp;gt; System Settings -&amp;gt; Android SDK -&amp;gt; SDK Tools 탭에서 NDK를 찾아 설치&lt;/del&gt;&lt;br /&gt;
위와 같이 하면 NDK 최신 버전이 설치되는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;WORKSPACE&lt;/code&gt; 파일을 보면 r12b를 쓰라 되어있다.&lt;br /&gt;
그러므로 &lt;a href=&quot;https://developer.android.com/ndk/downloads/older_releases.html#ndk-12b-downloads&quot;&gt;여기&lt;/a&gt;서 다운 받은 r12b를 설치&lt;/p&gt;

&lt;h1 id=&quot;bazel-설치&quot;&gt;Bazel 설치&lt;/h1&gt;
&lt;p&gt;텐서플로의 빌드 툴인 &lt;a href=&quot;https://docs.bazel.build/versions/master/bazel-overview.html&quot;&gt;Bazel&lt;/a&gt; 설치&lt;/p&gt;

&lt;h1 id=&quot;workspace-파일-수정&quot;&gt;WORKSPACE 파일 수정&lt;/h1&gt;
&lt;p&gt;Clone된 텐서플로 프로젝트의 Root의 &lt;code class=&quot;highlighter-rouge&quot;&gt;WORKSPACE&lt;/code&gt; 파일을 열어&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#android_sdk_repository(
#    name = &quot;androidsdk&quot;,
#    api_level = 23,
#    # Ensure that you have the build_tools_version below installed in the
#    # SDK manager as it updates periodically.
#    build_tools_version = &quot;25.0.2&quot;,
#    # Replace with path to Android SDK on your system
#    path = &quot;&amp;lt;PATH_TO_SDK&amp;gt;&quot;,
#)
#
# Android NDK r12b is recommended (higher may cause issues with Bazel)
#android_ndk_repository(
#    name=&quot;androidndk&quot;,
#    path=&quot;&amp;lt;PATH_TO_NDK&amp;gt;&quot;,
#    # This needs to be 14 or higher to compile TensorFlow.
#    # Note that the NDK version is not the API level.
#    api_level=14)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 부분의 주석을 제거하고 SDK 및 NDK 경로를 넣어줌&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;android_sdk_repository(
    name = &quot;androidsdk&quot;,
    api_level = 23,
    build_tools_version = &quot;25.0.2&quot;,
    path = &quot;/Users/mymacpro/Library/Android/sdk/&quot;,
)
android_ndk_repository(
    name=&quot;androidndk&quot;,
    path=&quot;/Users/mymacpro/AndroidStudio_workspace/android-ndk-r12b/&quot;,
    api_level=14)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;so-파일-빌드&quot;&gt;.so 파일 빌드&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bazel build -c opt //tensorflow/contrib/android:libtensorflow_inference.so \
--crosstool_top=//external:android/crosstool \
--host_crosstool_top=@bazel_tools//tools/cpp:toolchain \
--cpu=x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;빌드가 끝나면 프로젝트 폴더에 &lt;code class=&quot;highlighter-rouge&quot;&gt;bazel-bin/tensorflow/contrib/android/libtensorflow_inference.so&lt;/code&gt;가 생성&lt;/p&gt;

&lt;h1 id=&quot;jar-파일-빌드&quot;&gt;.jar 파일 빌드&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bazel build //tensorflow/contrib/android:android_tensorflow_inference_java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;마찬가지로 &lt;code class=&quot;highlighter-rouge&quot;&gt;bazel-bin/tensorflow/contrib/android/libandroid_tensorflow_inference_java.jar&lt;/code&gt; 생성됨&lt;/p&gt;

&lt;h1 id=&quot;안드로이드-프로젝트-생성&quot;&gt;안드로이드 프로젝트 생성&lt;/h1&gt;
&lt;h2 id=&quot;라이브러리-추가&quot;&gt;라이브러리 추가&lt;/h2&gt;
&lt;p&gt;라이브러리에 &lt;code class=&quot;highlighter-rouge&quot;&gt;libandroid_tensorflow_inference_java.jar&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;libtensorflow_inference.so&lt;/code&gt; 추가&lt;/p&gt;

&lt;p&gt;이제 텐서플로의 Java API를 &lt;code class=&quot;highlighter-rouge&quot;&gt;TensorFlowInferenceInterface&lt;/code&gt;를 통해 호출 가능하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;소스 빌드하지 않을 경우 라이브러리 추가하는 제일 간단한 방법&lt;br /&gt;
&lt;a href=&quot;http://ci.tensorflow.org/view/Nightly/job/nightly-android/&quot;&gt;Project nightly-android&lt;/a&gt;에서 빌드된 파일을 받는다.&lt;br /&gt;
굳이 빌드할 필요도 없음…&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>지식, 그리고 경제</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-02T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EB%8F%85%EC%84%9C/%EB%8B%A8%EC%83%81/2017/07/02/economics_stupid</id>
   <content type="html">&lt;p&gt;금요일에 도서관에 잠깐 들려 책을 몇권 빌렸다. 신간으로 들어온 책들을 마음가는대로 집어들었다.&lt;br /&gt;
마침 아침부터 비가 오고 날씨가 궂어 운동을 한 후 빌려온 책들을 읽으면서 시간을 보냈다.&lt;/p&gt;

&lt;h2 id=&quot;경제학-위의-오늘&quot;&gt;경제학 위의 오늘&lt;/h2&gt;
&lt;p&gt;주류 경제학자들과 다르게 인문학적 관점으로 경제학에 접근하는 서적이다.&lt;br /&gt;
상당히 강한 어조로 쓰여져 있는데 읽으며 장하준 교수의 어조가 떠오르기도 했다.&lt;br /&gt;
같은 비주류 경제학 출신의 저자여서 그런지 주류 경제학 서적들이 당연히 깔고가는 전제들에 대한 비판이 많다.&lt;/p&gt;

&lt;p&gt;주류의 입장에서는 자기들 존재의 근본을 의심하는 행위를 좋아할리 없다.&lt;br /&gt;
하지만 나는 경제학도도 아니고 사물의 원리와 근본을 따져보기 좋아하는 엔지니어이며,&lt;br /&gt;
가치판단이 들어갈 여지가 있는 사회과학에 대한 비판적 견해를 가지고 있기에 이런 주장들은 흥미로웠다.&lt;/p&gt;

&lt;p&gt;자신이 믿는 것이 진리이고, 자신의 진리를 인터넷이나 SNS를 통해 설파하는 모습에 조금 진저리가 난 터라,&lt;br /&gt;
당연하다고 생각되는 것들을 다시 따져보고 비판하는 저자의 주장이 더 마음에 들었던 것 같다.&lt;/p&gt;

&lt;p&gt;근본적인 발전을 위해서는 기본적 진리에 대한 탐구를 늦추지 않아야 한다는 엘론머스크의 말이 아니더라도,&lt;br /&gt;
경제와 사회제도가 삶에 미치는 영향이 너무도 지대하기에 자신만의 견해를 갖는 것이 주도적인 삶이라 본다.&lt;/p&gt;

&lt;p&gt;전문분야는 전문가에게 맡기고 우리는 각자의 삶을 열심히 살자라고 말할지도 모르겠지만,&lt;br /&gt;
지식이라는 것이 얼마나 쉽게 의도를 가지고 변질되는지 깨닿는다면 이는 너무 순진한 생각이다.&lt;br /&gt;
지식인들이 자신의 이익에 영합하여 지식을 변질시키는 여러 사례를 &lt;a href=&quot;https://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791160800203&amp;amp;orderClick=JAj&quot;&gt;지민의 탄생&lt;/a&gt;에서 찾아볼 수 있는데,&lt;br /&gt;
이런 지식인들에 대항하는 지민(전문지식을 가진 시민)까지는 아니더라도 &lt;br /&gt;
최소한 스스로 판단할줄 아는 사람이 될 수 있도록 생각하고 탐구하는 노력을 아끼지 말아야 한다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django를 이용한 포트폴리오 사이트 제작 (3) - 디자인 컨셉 잡기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-07-01T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/07/01/django-portfolio-page-(3)</id>
   <content type="html">&lt;h1 id=&quot;공동-프로젝트-진행상황&quot;&gt;공동 프로젝트 진행상황&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;1주차&lt;/strong&gt; : JQuery를 이용한 간단한 애니메이션&lt;br /&gt;
&lt;strong&gt;2주차&lt;/strong&gt; : Phaser Library를 이용한 마우스 이벤트에 반응하는 인터랙션&lt;br /&gt;
&lt;strong&gt;3주차&lt;/strong&gt; : &lt;a href=&quot;https://minyoungjung.github.io/%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/17/django-portfolio-page-(1)/&quot;&gt;개인 포트폴리오 사이트 공동 기획&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;4주차&lt;/strong&gt; : &lt;a href=&quot;https://minyoungjung.github.io/%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/22/django-portfolio-page-(2)/&quot;&gt;프로필 페이지 및 책장 넘기기 형태 구현&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;5주차-진행상황&quot;&gt;5주차 진행상황&lt;/h1&gt;
&lt;p&gt;지난주에 가닥을 잡았던 메뉴 구성 및 사이트 디자인이 전부 뒤엎어졌다.&lt;br /&gt;
홈 화면은 지난주와 같으나 네비게이션 바가 Drawer 형식으로 숨겨져 있으면 좋겠고,&lt;br /&gt;
전체적인 페이지 느낌이 책과 같으면 좋겠다는 디자인 컨셉이 잡혔다.&lt;br /&gt;
아직 정확한 컨셉이 확정되지 않아 기능구현은 무의미해 같이 이야기를 나누며 기획안을 그려보았다.&lt;br /&gt;
지난주에 제작했던 Page flip transition도 디테일이 마음에 안든다고 해 다른 라이브러리를 찾던지,&lt;br /&gt;
그냥 작정하고 처음부터 제작해야 할 것 같다.&lt;/p&gt;

&lt;h1 id=&quot;다음주-목표&quot;&gt;다음주 목표&lt;/h1&gt;
&lt;p&gt;디자인 확정&lt;br /&gt;
기획이 조금이라도 확정되어야 진전이 있을 것 같은 느낌이 든다.&lt;br /&gt;
분명 처음 기획은 그냥 간단히 작품 올리고 볼 수 있는 사이트였는데…&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>개인 도메인으로 이메일 설정하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-30T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/%EC%9D%B4%EB%A9%94%EC%9D%BC/2017/06/30/domain-email-setting</id>
   <content type="html">&lt;p&gt;기존에는 네이버 웍스를 이용해 내 도메인으로 된 메일을 이용했었다.&lt;br /&gt;
한동안 개인 도메인으로 된 메일 주소를 사용하지 않고 있다 갱신하려다보니,&lt;br /&gt;
네이버 웍스가 2016년 말쯤에 유료로 전환되었다.&lt;br /&gt;
굳이 유료로 쓰고 싶지는 않고 해서 도메인에서 지원하는 무료 웹메일 서비스를 신청한 후,&lt;br /&gt;
SMTP/POP3 설정을 통해 Gmail에 연동하였다.&lt;/p&gt;

&lt;h1 id=&quot;설정법&quot;&gt;설정법&lt;/h1&gt;
&lt;h2 id=&quot;지메일-환경설정-진입&quot;&gt;지메일 환경설정 진입&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-30/settings.png&quot; alt=&quot;지메일설정&quot; /&gt;&lt;/p&gt;

&lt;p&gt;가** 서비스의 무료 웹메일을 기준 설정&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;계정 및 가져오기&lt;/strong&gt; 탭 선택&lt;/p&gt;

&lt;h2 id=&quot;메일-가져오기-pop3&quot;&gt;메일 가져오기 (POP3)&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;다른 계정에서 메일 확인하기:&lt;/strong&gt; 항목의 &lt;strong&gt;메일 계정 추가&lt;/strong&gt; 선택&lt;/li&gt;
  &lt;li&gt;이메일 주소 입력&lt;/li&gt;
  &lt;li&gt;다른 계정에서 이메일 가져오기(POP3) 선택&lt;/li&gt;
  &lt;li&gt;POP3 연결 설정
&lt;img src=&quot;/post_assets/2017-06-30/pop3-secure.png&quot; alt=&quot;POP3설정&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;메일-보내기-smtp&quot;&gt;메일 보내기 (SMTP)&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;다른 주소에서 메일 보내기:&lt;/strong&gt; 항목의 &lt;strong&gt;메일 계정 추가&lt;/strong&gt; 선택&lt;/li&gt;
  &lt;li&gt;이메일 주소 입력&lt;/li&gt;
  &lt;li&gt;SMTP 설정
&lt;img src=&quot;/post_assets/2017-06-30/smtp.png&quot; alt=&quot;SMTP설정&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;무료 계정에게는 메일 보낼때 SSL 암호화를 지원하지 않는다고 한다.&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>사람들이 원하는것</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-29T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EB%8B%A8%EC%83%81/2017/06/29/what-people-want</id>
   <content type="html">&lt;p&gt;한때는 사람들이 원하는 것이 무엇인지 안다고 생각했다.&lt;br /&gt;
철없던 시절의 객기였는지 오만함에서 비롯된 생각인지는 모르겠다.&lt;br /&gt;
그 탓에 오랜 시간의 시행착오를 겪었고 그 덕에 많이 성장했지만,&lt;br /&gt;
&lt;strong&gt;무엇을 사람들이 원하는가&lt;/strong&gt;에 대한 정답은 더욱 멀어진 듯한 생각이 든다.&lt;/p&gt;

&lt;p&gt;때로는 정말 별것 아닌것에도 감탄하고, 정말 오랜 시간과 공을 들인 것들에는 심드렁하고,&lt;br /&gt;
인간도 하나의 동물일 뿐이라지만, 개인의 다양성은 내가 상상하는 범위를 언제나 벗어나곤 한다.&lt;/p&gt;

&lt;p&gt;당분간은 내 생각을 버리고, 사람들이 직접 원한다고 말하는 것들을 들어볼 생각이다.&lt;br /&gt;
물론 개인 프로젝트도 내가 하고싶은 것 말고, 사람들이 말하는 것 위주로 제작해 봐야겠지.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django Admin 테마 변경하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-28T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/2017/06/28/django-admin-theme-change</id>
   <content type="html">&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;
&lt;p&gt;Django의 기본 Admin은 강력한 기능이지만 Look이 그다지 아름답지 않다.&lt;br /&gt;
직접 Admin을 커스터마이즈 하는 것은 상당히 손이 많이 가므로 &lt;a href=&quot;https://djangopackages.org/grids/g/admin-styling/&quot;&gt;djangopackages.org&lt;/a&gt;에 올라와 있는&lt;br /&gt;
패키지를 이용해 간단히 수정해 보았다.&lt;/p&gt;

&lt;h1 id=&quot;패키지-선택&quot;&gt;패키지 선택&lt;/h1&gt;
&lt;p&gt;가장 널리 쓰이는 &lt;code class=&quot;highlighter-rouge&quot;&gt;DJANGO-GRAPPELLI&lt;/code&gt;부터, &lt;code class=&quot;highlighter-rouge&quot;&gt;DJANGO-SUIT&lt;/code&gt; 등등 여러 패키지가 있지만,&lt;br /&gt;
Material Design의 팬(?)으로써 &lt;code class=&quot;highlighter-rouge&quot;&gt;DJANGO-MATERIAL&lt;/code&gt;을 이용해 보았다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;DJANGO-MATERIAL&lt;/code&gt;은 전에 &lt;a href=&quot;https://minyoungjung.github.io/%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/08/django-scheduler-(1)/&quot;&gt;Django를 이용한 스케쥴러 제작&lt;/a&gt;에서도 이용했었던 &lt;a href=&quot;http://materializecss.com/getting-started.html&quot;&gt;Materialize&lt;/a&gt;를 기반으로 하므로&lt;br /&gt;
사용도 간단하리라 생각했다.&lt;/p&gt;

&lt;h1 id=&quot;사용법&quot;&gt;사용법&lt;/h1&gt;
&lt;h2 id=&quot;django-material-설치&quot;&gt;django-material 설치&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install django-material&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;installed_apps-추가&quot;&gt;INSTALLED_APPS 추가&lt;/h2&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'material'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'material.admin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.admin&lt;/code&gt; 앞에 두 줄이 추가되어야 한다.&lt;/p&gt;

&lt;h2 id=&quot;적용결과&quot;&gt;적용결과&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-28/material-admin.png&quot; alt=&quot;적용결과&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;간단한-커스터마이즈-사이드바-아이콘&quot;&gt;간단한 커스터마이즈 (사이드바 아이콘)&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apps.py&lt;/code&gt;의 AppConfig class에 &lt;code class=&quot;highlighter-rouge&quot;&gt;icon = '&amp;lt;i class=&quot;material-icons&quot;&amp;gt;subject&amp;lt;/i&amp;gt;'&lt;/code&gt;속성 추가&lt;br /&gt;
아이콘 주소는 &lt;a href=&quot;https://material.io/icons/&quot;&gt;https://material.io/icons/&lt;/a&gt;를 따른다.&lt;/p&gt;

&lt;h2 id=&quot;간단한-커스터마이즈-카드-내-아이콘&quot;&gt;간단한 커스터마이즈 (카드 내 아이콘)&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;admin.py&lt;/code&gt;의 admin.ModelAdmin class에 &lt;code class=&quot;highlighter-rouge&quot;&gt;icon&lt;/code&gt; 속성 추가 (위와 동일)&lt;/p&gt;

&lt;h2 id=&quot;커스터마이즈-후-결과&quot;&gt;커스터마이즈 후 결과&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-28/material-admin-modify.png&quot; alt=&quot;커스터마이즈 결과&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;추가-커스터마이즈&quot;&gt;추가 커스터마이즈&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.viewflow.io/admin_customization.html&quot;&gt;라이브러리 Doc 참조&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Volley를 이용해 간단한 Android Rest API Client 만들기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-27T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/android/2017/06/27/android-rest-api-client-volley</id>
   <content type="html">&lt;h1 id=&quot;서론&quot;&gt;서론&lt;/h1&gt;
&lt;p&gt;지난번에 마무리했던 Project인 &lt;a href=&quot;https://minyoungjung.github.io/%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/06/12/django-landlord-reputation-(1)/&quot;&gt;Django를 이용한 건물주 평판 조회 서비스 제작 (1) - 기획&lt;/a&gt;에서&lt;br /&gt;
추가 목표로 안드로이드 App을 연동하기로 했으므로 간단하게나마 API Client를 작성한다.&lt;/p&gt;

&lt;h1 id=&quot;api-overview&quot;&gt;API overview&lt;/h1&gt;
&lt;p&gt;클라이언트에 사용되는 API는&lt;br /&gt;
&lt;a href=&quot;https://minyoungjung.github.io/%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/21/restapi-django/&quot;&gt;Django에 Rest API 추가하기&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://minyoungjung.github.io/%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/23/restapi-django-(2)/&quot;&gt;Django에 Rest API 추가하기 (2) - API에 인증 추가&lt;/a&gt;&lt;br /&gt;
위의 포스팅들을 통해 제작한 간단한 API이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://landlord-reputation.herokuapp.com/reputation/api/경도+위도&lt;/code&gt; 형태로 질의 시,&lt;br /&gt;
&lt;a href=&quot;http://landlord-reputation.herokuapp.com/&quot;&gt;우리동네집주인&lt;/a&gt;에 추가된 평판 정보를 전송하는 API이다.&lt;/p&gt;

&lt;h1 id=&quot;android-application-layout&quot;&gt;Android Application Layout&lt;/h1&gt;
&lt;p&gt;EditText 2개를 통해 각각 위/경도를 전달받고 TextView를 통해 Response를 출력한다.&lt;br /&gt;
간단하므로 설명은 생략.&lt;/p&gt;

&lt;h1 id=&quot;volley-추가&quot;&gt;Volley 추가&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle (Module:app)&lt;/code&gt; 파일에 dependency를 추가한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;compile 'com.android.volley:volley:1.0.0'&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;androidmanifestxml-권한-설정&quot;&gt;AndroidManifest.xml 권한 설정&lt;/h1&gt;
&lt;p&gt;인터넷 엑서스가 필요하므로 인터넷 권한도 설정한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-XML&quot;&gt;&amp;lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;volley-사용&quot;&gt;Volley 사용&lt;/h1&gt;
&lt;p&gt;JSONObject Request를 이용해서 간단히 구현했다.&lt;br /&gt;
Volley의 자세한 사용법은 &lt;a href=&quot;https://ringsterz.wordpress.com/2014/12/03/volley%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-network-data-%EC%A0%84%EC%86%A1%ED%95%98%EA%B8%B0-1-simple-request-%EC%A0%84%EC%86%A1/&quot;&gt;예전 블로그&lt;/a&gt;에 써놓은 글을 참조.&lt;/p&gt;

&lt;h1 id=&quot;api-client-실행-결과&quot;&gt;API Client 실행 결과&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-27/API_client.png&quot; alt=&quot;실행결과&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;github-링크&quot;&gt;Github 링크&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/MinyoungJung/SimpleAndroidRestAPIClient&quot;&gt;SimpleAndroidRestAPIClient 바로가기&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Google Tag analysis 사용하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-26T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//analytics/%EB%B8%94%EB%A1%9C%EA%B7%B8/2017/06/26/Google-tag-analysis</id>
   <content type="html">&lt;h1 id=&quot;tag-analysis&quot;&gt;Tag analysis&lt;/h1&gt;
&lt;p&gt;Tag Anaylytics는 Google Analytics등 추적코드가 정상적으로 동작하는지 알게 해주는 툴이다.&lt;br /&gt;
Github blog의 사용자 추적을 위해 걸어넣은 Google Analytics 대쉬보드에 들어갈때마다&lt;br /&gt;
Tag analysis를 사용해 보라는 팝업이 계속해서 출력되어 사용해 보기로 했다.&lt;/p&gt;

&lt;h1 id=&quot;사용법&quot;&gt;사용법&lt;/h1&gt;
&lt;h2 id=&quot;크롬-애드온-설치&quot;&gt;크롬 애드온 설치&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-26/chrome_addon.png&quot; alt=&quot;애드온설치&quot; /&gt;
크롬에 Tag Assistant 애드온을 설치한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-26/addon_installed.png&quot; alt=&quot;설치화면&quot; /&gt;
설치되면 애드온에 위와 같이 Assistant 아이콘이 출력된다.&lt;/p&gt;

&lt;h2 id=&quot;현재-페이지에서-tag-analysis-사용&quot;&gt;현재 페이지에서 Tag analysis 사용&lt;/h2&gt;
&lt;p&gt;Enalble을 선택한 후 페이지를 리로드 한다.&lt;/p&gt;

&lt;h2 id=&quot;여러-페이지에-걸쳐-tag-analysis-사용&quot;&gt;여러 페이지에 걸쳐 Tag analysis 사용&lt;/h2&gt;
&lt;p&gt;Record를 선택한 후 여러 페이지를 걸쳐 이동한다.&lt;br /&gt;
이후 Recording을 중지하면 이동한 페이지들에 대한 레포트를 출력해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-26/analysis_result.png&quot; alt=&quot;결과&quot; /&gt;
&lt;img src=&quot;/post_assets/2017-06-26/analysis_report.png&quot; alt=&quot;리포트&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;full-analysis_report&quot;&gt;Full analysis_report&lt;/h2&gt;
&lt;p&gt;View Full report를 선택하면 전체 레포트를 출력한다.
&lt;img src=&quot;/post_assets/2017-06-26/report_detail_1.png&quot; alt=&quot;리포트 상세1&quot; /&gt;
&lt;img src=&quot;/post_assets/2017-06-26/report_detail_2.png&quot; alt=&quot;리포트 상세2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제점-해결하기&quot;&gt;문제점 해결하기&lt;/h2&gt;
&lt;p&gt;문제가 있는 태그가 있다면 태그가 붉은색으로 표시되는데 해당 태그를 선택하면 관련 오류 메시지가 출력된다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Django를 이용한 건물주 평판 조회 서비스 제작 (5) - Heroku 업로드</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-25T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/06/25/django-landlord-reputation-(5)</id>
   <content type="html">&lt;h1 id=&quot;진행률&quot;&gt;진행률&lt;/h1&gt;
&lt;p&gt;모든 기능구현을 끝내고 개발/운영환경을 설정 후 여러 보안 키들을 분리했다.&lt;br /&gt;
&lt;a href=&quot;https://minyoungjung.github.io/%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/24/django-multiple-settings/&quot;&gt;Django 설정 개발/운영환경 나누기, PostgreSQL 사용하기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;그리고 Heroku에 릴리즈하기 위한 설정을 했다.&lt;br /&gt;
&lt;a href=&quot;https://minyoungjung.github.io/%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/10/django-project-heroku/&quot;&gt;Django 프로젝트 Heroku에 릴리즈하기&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;heroku-설정-환경변수&quot;&gt;Heroku 설정 (환경변수)&lt;/h1&gt;
&lt;p&gt;Django의 SECRET_KEY나 여러 API키들을 숨기기 위해 환경변수를 이용한 설정을 하는 경우,&lt;br /&gt;
Heroku에도 동일하게 환경변수를 이용해 설정을 해줘야 한다.&lt;/p&gt;

&lt;h2 id=&quot;secret_key-설정&quot;&gt;SECRET_KEY 설정&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku config:set SECRET_KEY=asdasdsad&lt;/code&gt; &lt;strong&gt;= 양쪽에 공백이 없어야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;django_settings_module-설정&quot;&gt;DJANGO_SETTINGS_MODULE 설정&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku config:set DJANGO_SETTINGS_MODULE=앱이름.settings.prod&lt;/code&gt;&lt;br /&gt;
이 항목을 설정해야 Heroku에 push 할때 여러개의 설정 파일 중, 운영환경의 설정 파일을 적용한다.&lt;br /&gt;
&lt;strong&gt;이 항목을 적용하지 않으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;ModuleNotFoundError: No module named 'settings'&lt;/code&gt; 에러가 발생한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아니면 Heroku 사이트의 &lt;a href=&quot;https://dashboard.heroku.com/apps&quot;&gt;대시보드&lt;/a&gt;에서 Settings 탭의 Config Variables를 통해 직접 설정할 수도 있다.&lt;/p&gt;

&lt;h1 id=&quot;heroku-설정-local-test&quot;&gt;Heroku 설정 (Local Test)&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku conifg&lt;/code&gt;를 통해 환경변수 설정값을 확인하고,&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku local web&lt;/code&gt;을 통해 heroku 설정을 이용해 로컬 웹서버를 띄워본다.&lt;br /&gt;
이때 여전히 &lt;code class=&quot;highlighter-rouge&quot;&gt;ModuleNotFoundError: No module named 'settings'&lt;/code&gt; 에러가 발생하는 경우가 있다.  &lt;br /&gt;
이는 로컬 웹서버를 띄울 시 DJANGO_SETTINGS_MODULE 환경변수 값을 Heroku에 설정한 값이 아닌&lt;br /&gt;
로컬에 설정되어 있는 값을 가져오기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;env | grep DJANGO_SETTINGS_MODULE&lt;/code&gt;을 통해 값을 확인하고 값이 Heroku에 설정한 값과 다를 경우&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;export DJANGO_SETTINGS_MODULE=앱이름.settings.prod&lt;/code&gt;를 입력하면 해결할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;heroku-설정-debugfalse-및-whitenoise&quot;&gt;Heroku 설정 (Debug=False 및 whitenoise)&lt;/h1&gt;
&lt;p&gt;이 설정 때문에 무난히도 삽질을 했다.&lt;br /&gt;
전에 &lt;a href=&quot;https://minyoungjung.github.io/%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/09/django-scheduler-(2)/&quot;&gt;Django를 이용한 스케쥴러 제작 (2) - 구현&lt;/a&gt; 시에는 사실 나 혼자 쓸 것이기도 하고,&lt;br /&gt;
귀찮기도 해서 Debug도 켜놓고 키값조차 감추지 않은 개발환경 그대로 Heroku에 업로드를 했다.&lt;br /&gt;
그때만 해도 &lt;a href=&quot;https://minyoungjung.github.io/%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/10/django-project-heroku/&quot;&gt;Django 프로젝트 Heroku에 릴리즈하기&lt;/a&gt; 대로만 하면 아무런 문제없이 Heroku에서 동작했다.&lt;/p&gt;

&lt;p&gt;문제는 Debug를 False로 놓았을 때인데… &lt;a href=&quot;https://devcenter.heroku.com/articles/django-app-configuration#migrating-an-existing-django-project&quot;&gt;Heroku 문서&lt;/a&gt;부터가 삽질을 조장한다.&lt;br /&gt;
&lt;a href=&quot;http://whitenoise.evans.io/en/stable/django.html#make-sure-staticfiles-is-configured-correctly&quot;&gt;whitenoise 문서&lt;/a&gt;를 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;의 MIDDLEWARE 설정에 &lt;code class=&quot;highlighter-rouge&quot;&gt;whitenoise.middleware.WhiteNoiseMiddleware',&lt;/code&gt;를 추가하라 되어있지만,&lt;br /&gt;
이런 내용이 Heroku에는 쏙 빠져있다.&lt;br /&gt;
덕분에 500 Internal server error를 일으키며 site가 동작하지 않는다.&lt;/p&gt;

&lt;p&gt;나의 경우는 미들웨어 설정을 추가했는데도 whitenoise가 계속 문제를 일으키며 staticfile을 제대로 제공하지 않아,&lt;br /&gt;
결국 whitenoise 대신 기본 Django staticfiles로 해결했다.&lt;/p&gt;

&lt;h2 id=&quot;whitenoise-대신-default-django-staticfiles-이용&quot;&gt;whitenoise 대신 default Django staticfiles 이용&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'&lt;/code&gt;로 교체&lt;br /&gt;
이후 &lt;code class=&quot;highlighter-rouge&quot;&gt;python manage.py collectstatic --settings=앱이름.settings.prod&lt;/code&gt;를 실행하고&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku local web&lt;/code&gt;을 실행하면 사이트가 정상 동작한다.&lt;br /&gt;
heroku에서는 Profile을 통해 collectstatic이 자동으로 실행된다.&lt;/p&gt;

&lt;h1 id=&quot;마무리&quot;&gt;마무리&lt;/h1&gt;
&lt;p&gt;이걸로 또 하나의 프로젝트가 마무리 되었다.&lt;br /&gt;
&lt;a href=&quot;http://landlord-reputation.herokuapp.com/&quot;&gt;우리동네집주인 바로가기&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django 설정 개발/운영환경 나누기, PostgreSQL 사용하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-24T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/24/django-multiple-settings</id>
   <content type="html">&lt;h1 id=&quot;개발운영환경-설정파일-분리&quot;&gt;개발/운영환경 설정파일 분리&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Settings 폴더를 생성하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; 파일을 넣어 모듈로 만든다.&lt;/li&gt;
  &lt;li&gt;기존 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;base.py&lt;/code&gt;로 변경하여 setting에 공통으로 필요한 부분만 남긴다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;base.py&lt;/code&gt;를 import한 &lt;code class=&quot;highlighter-rouge&quot;&gt;prod.py&lt;/code&gt;를 추가하여 운영 환경에 관련된 세팅을 추가한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;base.py&lt;/code&gt;를 import한 &lt;code class=&quot;highlighter-rouge&quot;&gt;dev.py&lt;/code&gt;를 추가하여 개발환경에 관련된 세팅을 추가한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.base&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# SECURITY WARNING: don't run with debug turned on in production!
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;EMAIL_BACKEND&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'django.core.mail.backends.console.EmailBackend'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;키값-분리&quot;&gt;키값 분리&lt;/h1&gt;
&lt;p&gt;base.py에서 SECRET_KEY나 여러 API키 등 노출되면 안되는 부분을 분리해야 한다.&lt;br /&gt;
가상환경의 &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/activate&lt;/code&gt; 파일을 수정하여 마지막 부분에 다음 줄을 넣는다.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SECRET_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;secret key&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이후 &lt;code class=&quot;highlighter-rouge&quot;&gt;SECRET_KEY = os.environ[&quot;SECRET_KEY&quot;]&lt;/code&gt;를 세팅에 추가한다.&lt;br /&gt;
Runserver를 동작시켜보면 잘 돌아간다.&lt;/p&gt;

&lt;h1 id=&quot;pycharm에서의-문제점&quot;&gt;Pycharm에서의 문제점&lt;/h1&gt;
&lt;p&gt;위와 같이 설정할 경우 Pycharm에서 서버를 실행하면 환경변수를 받아오지 못한다.&lt;br /&gt;
이는 Pycharm과 같은 GUI 프로그램이 가상환경을 실행한 Shell을 상속받지 않기 때문인데,&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_env_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;configparser&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;env_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'PROJECT_ENV_FILE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getcwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/.env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[DATA]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEEK_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configparser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'DATA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&quot;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&quot;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;IOError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.core.exceptions&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImproperlyConfigured&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;error_msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Either set the env variable '{var}' or place it in your &quot;&lt;/span&gt; \
                    &lt;span class=&quot;s&quot;&gt;&quot;{env_file} file as '{var} = VALUE'&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImproperlyConfigured&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error_msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Make this unique, and don't share it with anybody.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SECRET_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_env_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'SECRET_KEY'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 환경변수를 받아오는 메소드를 설정파일에 집어넣고,&lt;br /&gt;
프로젝트 루트에 &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt;파일을 생성해서&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;SECRET_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;secret key&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;과 같이 작성하면 해결된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;위와 같은 경우에는 .gitignore에 .env 파일을 추가해서 키값이 노출되는 것을 막아줘야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;설정파일-적용&quot;&gt;설정파일 적용&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python manage.py runserver --settings=앱이름.settings.dev&lt;/code&gt;&lt;br /&gt;
위와 같이 설정파일을 각각 적용 가능하다.&lt;/p&gt;

&lt;h1 id=&quot;postgresql-사용하기&quot;&gt;PostgreSQL 사용하기&lt;/h1&gt;
&lt;p&gt;Django는 기본 DB로 SQLite를 사용한다.&lt;br /&gt;
운영 환경에서는 PostgreSQL을 이용할 것이므로, 개발환경에서도 PostgreSQL을 적용하기로 했다.&lt;br /&gt;
ORM이 많은 부분을 해결해 주더라도 개발/운영환경이 일치되는 편이 문제 발생률을 크게 줄여준다.&lt;br /&gt;
또한 실환경의 Data를 덤프해서 개발환경에 집어넣고 테스트가 가능하기도 하다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;psycopg2 설치&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install psycopg2&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;postgresql 설치 및 db 생성&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;createdb db이름&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dev.py&lt;/code&gt;에 설정
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;'ENGINE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'django.db.backends.postgresql_psycopg2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;'NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'db이름'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;'USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;'PASSWORD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;'HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;'PORT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;migrate 하기&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;python manage.py migrate --settings=앱이름.settings.dev&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;superuser 생성&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;python manage.py createsuperuser --settings=앱이름.settings.dev&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;서버 실행&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;python manage.py runserver --settings=앱이름.settings.dev&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;pgadmin4&quot;&gt;pgAdmin4&lt;/h1&gt;
&lt;h2 id=&quot;data-보기&quot;&gt;Data 보기&lt;/h2&gt;
&lt;p&gt;db이름 → Schemas → public → Tables → 테이블에서 우클릭 → View Data&lt;/p&gt;

&lt;h2 id=&quot;기타&quot;&gt;기타&lt;/h2&gt;
&lt;p&gt;SQlite GUI 관리툴로는 DB Browser for SQLite를 쓰며 만족스러웠는데,&lt;br /&gt;
이놈의 pgAdmin4는 왜이렇게 마음에 안드는지 모르겠다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django에 Rest API 추가하기 (2) - API에 인증 추가</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-23T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/23/restapi-django-(2)</id>
   <content type="html">&lt;h1 id=&quot;지난번에-추가한-api&quot;&gt;지난번에 추가한 API&lt;/h1&gt;
&lt;p&gt;지난번에는 Django REST Framework의 &lt;code class=&quot;highlighter-rouge&quot;&gt;generics.RetrieveUpdateDestroyAPIView&lt;/code&gt;를 이용하여,&lt;br /&gt;
GET/PUT/PATHCH/DELETE에 반응하는 API를 제작했다.&lt;br /&gt;
&lt;a href=&quot;https://minyoungjung.github.io/%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/21/restapi-django/&quot;&gt;Django에 Rest API 추가하기 - 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;하지만 지금 상태로는 누구나 정보를 수정/삭제가 가능하므로 인증 기능을 추가해야 한다.&lt;/p&gt;

&lt;h1 id=&quot;api에-인증-추가&quot;&gt;API에 인증 추가&lt;/h1&gt;
&lt;p&gt;로그인 하지 않으면 Read 권한만 주고 로그인한 사용자에게는 Write/Update 권한을 주려면 간단한 방법이 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rest_framework&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReputationDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MultipleFieldLookupMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetrieveUpdateDestroyAPIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reputation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serializer_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReputationSerializer&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lookup_fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'longitude'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'latitude'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;permission_classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsAuthenticatedOrReadOnly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 추가
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 현재 서비스는 다중 사용자 환경이므로, 이와 같이 작성하면 계정을 가진 모두가 정보를 삭제할 수 있게 된다.&lt;br /&gt;
따라서 정보 작성자의 계정과 api 접속 인증 계정이 일치할 때만 정보를 삭제할 수 있도록 해야 한다.&lt;br /&gt;
이를 위해서 먼저 Custom permisson을 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rest_framework&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IsOwnerOrReadOnly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BasePermission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;has_object_permission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SAFE_METHODS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# GET, HEAD, OPTIONS 
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;owner_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 새로운 권한을 추가하고, SAFE_METHOD(객체의 상태를 변화시키지 않는 메소드)일 경우는 True를 반환,&lt;br /&gt;
그렇지 않은 경우에는 정보의 모델 필드의 owner_id가 요청하는 유저의 id와 일치할때만 True를 반환하게 했다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;reputation.permissions&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IsOwnerOrReadOnly&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReputationDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MultipleFieldLookupMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetrieveUpdateDestroyAPIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reputation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serializer_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReputationSerializer&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lookup_fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'longitude'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'latitude'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;permission_classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsOwnerOrReadOnly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 변경
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그 후 API를 반환하는 View의 퍼미션 클래스에 해당 클래스를 추가했다.&lt;br /&gt;
마지막으로 object를 반환하는 mixin 클래스에서,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class MultipleFieldLookupMixin(object):
    def get_object(self):
        queryset = self.get_queryset()             # Get the base queryset
        queryset = self.filter_queryset(queryset)  # Apply any filter backends
        filter = {}
        for field in self.lookup_fields:
            if self.kwargs[field]:  # Ignore empty fields.
                filter[field] = self.kwargs[field]
        obj = get_object_or_404(queryset, **filter)  # Lookup the object
        self.check_object_permissions(self.request, obj)  # Check permissions
        return obj
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 obj를 반환하기 전에 퍼미션을 확인하도록 변경하였다.&lt;/p&gt;

&lt;h1 id=&quot;api-테스트-결과&quot;&gt;API 테스트 결과&lt;/h1&gt;
&lt;h2 id=&quot;postman을-이용해서-api를-테스트-한-결과-get&quot;&gt;Postman을 이용해서 api를 테스트 한 결과 (GET)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-23/without_auth.png&quot; alt=&quot;실행결과&quot; /&gt;
GET 명령은 인증 없이도 잘 동작한다.&lt;/p&gt;

&lt;h2 id=&quot;postman을-이용해서-api를-테스트-한-결과-delete&quot;&gt;Postman을 이용해서 api를 테스트 한 결과 (DELETE)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-23/without_auth_delete.png&quot; alt=&quot;실행결과&quot; /&gt;
Delete 명령은 인증이 없으니 동작하지 않는다.&lt;/p&gt;

&lt;h2 id=&quot;postman을-이용해서-api를-테스트-한-결과-delete--wrong-auth&quot;&gt;Postman을 이용해서 api를 테스트 한 결과 (DELETE &amp;amp; wrong Auth)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-23/invalid_id_pw.png&quot; alt=&quot;실행결과&quot; /&gt;
Auth를 포함할 때 잘못된 아이디/패스워드를 사용했을때는 다음과 같은 결과가 돌아온다.&lt;/p&gt;

&lt;h2 id=&quot;postman을-이용해서-api를-테스트-한-결과-delete--auth-not-owner&quot;&gt;Postman을 이용해서 api를 테스트 한 결과 (DELETE &amp;amp; Auth (not owner))&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-23/valid_auth_not_owner.png&quot; alt=&quot;실행결과&quot; /&gt;
제대로된 Auth로 인증했으나 Owner가 아닌 경우에도 역시 동작하지 않는다.&lt;/p&gt;

&lt;h2 id=&quot;postman을-이용해서-api를-테스트-한-결과-delete--auth-owner&quot;&gt;Postman을 이용해서 api를 테스트 한 결과 (DELETE &amp;amp; Auth (Owner))&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-23/valid_auth_owner.png&quot; alt=&quot;실행결과&quot; /&gt;
Owner인 경우에는 정상적으로 동작하여 해당 정보가 삭제되었다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django를 이용한 포트폴리오 사이트 제작 (2) - 사이트 형태 잡기, User Model 확장</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-22T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/22/django-portfolio-page-(2)</id>
   <content type="html">&lt;h1 id=&quot;공동-프로젝트-진행상황&quot;&gt;공동 프로젝트 진행상황&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;1주차&lt;/strong&gt; : JQuery를 이용한 간단한 애니메이션&lt;br /&gt;
&lt;strong&gt;2주차&lt;/strong&gt; : Phaser Library를 이용한 마우스 이벤트에 반응하는 인터랙션&lt;br /&gt;
&lt;strong&gt;3주차&lt;/strong&gt; : 개인 포트폴리오 사이트 공동 기획&lt;/p&gt;

&lt;h1 id=&quot;4주차-진행상황&quot;&gt;4주차 진행상황&lt;/h1&gt;
&lt;p&gt;이번주는 토요일에 작업을 진행하기 힘들것 같아 일정을 미리 앞당겨 진행했다.&lt;br /&gt;
먼저 지난주 목표였던 요구사항에 대해 작업을 진행했다.&lt;/p&gt;

&lt;h2 id=&quot;지난주-요구사항&quot;&gt;지난주 요구사항&lt;/h2&gt;
&lt;h3 id=&quot;최신-작업중인-작품을-보여주는-페이지&quot;&gt;최신 작업중인 작품을 보여주는 페이지&lt;/h3&gt;
&lt;p&gt;TemplateView를 상속한 HomeView를 추가해서 최신 작품의 커버 이미지를 보여주는 페이지를 제작했다.&lt;/p&gt;

&lt;h3 id=&quot;간단한-프로필-페이지-contact-profile-description-sns-링크-등&quot;&gt;간단한 프로필 페이지 (Contact, Profile description, SNS 링크 등)&lt;/h3&gt;
&lt;p&gt;TemplateView를 상속해 마찬가지로 정적 페이지로 제작해 집어넣었다가 마지막에 약간 수정했다.&lt;br /&gt;
Django의 기본 User Model을 확장하여 SNS ID나 Biography 등을 넣을 수 있게끔 하고,&lt;br /&gt;
이 내용이 프로필 페이지에 반영되도록 했다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OneToOneField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;twitter_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;instagram_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tumblr_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;facebook_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;별도의 User model 자체에 대한 변경은 필요없고 몇개 추가적인 필드가 필요한 뿐이라,&lt;br /&gt;
위와 같이 OneToOneField를 이용해 유저 모델을 확장했다.&lt;/p&gt;

&lt;h3 id=&quot;기존-작품-목록&quot;&gt;기존 작품 목록&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;목록을 선택하면 &lt;a href=&quot;https://issuu.com/&quot;&gt;ISSUU&lt;/a&gt;와 같은 책 형식으로 작품을 보여줄 수 있어야 함.&lt;/li&gt;
  &lt;li&gt;아날로그적인 느낌으로 책장을 넘기는 애니메이션이 있으면 좋겠음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;목록은 단순히 그리드 형태로 배치하고, 선택했을때 Modal popup을 이용해 상세정보를 띄워주도록 했다.&lt;br /&gt;
책장을 넘기는 애니메이션이 있는 Viewer는 JQuery Library 중 page transition 관련 하나를 골라 제작했다.&lt;/p&gt;

&lt;h3 id=&quot;사이드-프로젝트-목록&quot;&gt;사이드 프로젝트 목록&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;주 작업 외에 기타 작품들을 전시할 공간&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아직 어떠한 작품들을 어떠한 형식으로 보여주고 싶은지 확정되지 않아 Navbar와 링크만 제작해 놓았다.&lt;/p&gt;

&lt;h1 id=&quot;다음주-목표&quot;&gt;다음주 목표&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;작품 업로드 구현하기
    &lt;ul&gt;
      &lt;li&gt;여러장의 이미지로 이루어진 파일을 손쉽게 올릴수 있는 방법 생각&lt;/li&gt;
      &lt;li&gt;여러장의 이미지에는 Cover와 table contents가 포함되어 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;관리자 기능 추가 및 디자인 업데이트&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Django에 Rest API 추가하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-21T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/21/restapi-django</id>
   <content type="html">&lt;h1 id=&quot;api-구성&quot;&gt;API 구성&lt;/h1&gt;
&lt;p&gt;기존에 만든 &lt;a href=&quot;https://minyoungjung.github.io/%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/06/16/django-landlord-reputation-(4)/&quot;&gt;Django를 이용한 건물주 평판 조회 서비스&lt;/a&gt;에 Rest API를 추가하려 한다.&lt;br /&gt;
API endpoint로 &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/위도+경도&lt;/code&gt;의 URL을 날리면 해당 좌표에 맞는 정보가 날아오는 형태이다.&lt;/p&gt;

&lt;h1 id=&quot;django-rest-framework-설치&quot;&gt;Django REST Framework 설치&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install djangorestframework&lt;/code&gt;&lt;br /&gt;
Rest API를 생성할때 가장 보편적으로 쓰는 라이브러리인 Django REST Framework를 설치한다.&lt;/p&gt;

&lt;h1 id=&quot;serializer-클래스-정의&quot;&gt;Serializer 클래스 정의&lt;/h1&gt;
&lt;p&gt;별도의 &lt;code class=&quot;highlighter-rouge&quot;&gt;serializer.py&lt;/code&gt; 파일을 정의하였다.&lt;br /&gt;
모델 전체를 Serialize 할 수도 있지만, ModelSerializer를 상속받으면 더욱 간단하다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;reputation.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reputation&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rest_framework&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializers&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReputationSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reputation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'address'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'latitude'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'longitude'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'description'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Django Shell에서 작성한 Serializer를 확인해 보았다.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; from reputation.serializer import ReputationSerializer
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; ser &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ReputationSerializer&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;repr&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ser&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
ReputationSerializer&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;:
address &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; CharField&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;50&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
latitude &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; DecimalField&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;decimal_places&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;7, &lt;span class=&quot;nv&quot;&gt;max_digits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
longitude &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; DecimalField&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;decimal_places&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;7, &lt;span class=&quot;nv&quot;&gt;max_digits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
description &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; CharField&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'base_template'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'textarea.html'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;api-url-생성&quot;&gt;API URL 생성&lt;/h1&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Endpoint URL: /api/126.575834+33.427337/
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'^api/(?P&amp;lt;longitude&amp;gt;\d{1,3}\.\d{1,7})\+(?P&amp;lt;latitude&amp;gt;\d{1,2}\.\d{1,7})/$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ReputationDetail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'reputation_rest_api'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위도, 경도를 매개변수로 넘겨주도록 URL을 설정했다.&lt;/p&gt;

&lt;h1 id=&quot;api를-제공하는-view-생성&quot;&gt;API를 제공하는 View 생성&lt;/h1&gt;
&lt;p&gt;하나의 모델에 대해 read-write-delete 엔드포인트를 제공하는 RetrieveUpdateDestroyAPIView를 상속받았다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;reputation.serializer&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReputationSerializer&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rest_framework&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generics&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReputationDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetrieveUpdateDestroyAPIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reputation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serializer_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReputationSerializer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;DB의 리스트를 전부 출력하기 위해서는 위와 같이 generics를 적절히 상속받는 것으로 충분하나&lt;br /&gt;
넘겨받은 위/경도를 이용해서 DB를 검색하기 위해 조금 추가 작업이 필요하다.&lt;/p&gt;

&lt;p&gt;여러개의 필드를 검색할 수 있는 Mixin class를 생성하여 ReputationDetail이 상속받도록 한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MultipleFieldLookupMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;# Get the base queryset
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Apply any filter backends
&lt;/span&gt;        &lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Ignore empty fields.
&lt;/span&gt;                &lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_object_or_404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Lookup the object
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 ReputationDetail이 MultipleFieldLookupMixin을 상속하게 하고,&lt;br /&gt;
lookup_fields 항목에 필터로 지정할 항목을 정해주면 된다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReputationDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MultipleFieldLookupMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetrieveUpdateDestroyAPIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reputation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serializer_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReputationSerializer&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lookup_fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'longitude'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'latitude'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;api-테스트-결과&quot;&gt;API 테스트 결과&lt;/h1&gt;
&lt;p&gt;Postman을 이용해서 api를 테스트 한 결과
&lt;img src=&quot;/post_assets/2017-06-21/test_api.png&quot; alt=&quot;실행결과&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;다음편-링크&quot;&gt;다음편 링크&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://minyoungjung.github.io/%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/23/restapi-django-(2)/&quot;&gt;Django에 Rest API 추가하기 (2) - API에 인증 추가&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django 서비스 테스트하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-20T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/%ED%85%8C%EC%8A%A4%ED%8A%B8/2017/06/20/inserting-testcode-django</id>
   <content type="html">&lt;h1 id=&quot;coverage-설치&quot;&gt;Coverage 설치&lt;/h1&gt;
&lt;p&gt;파이썬 코드의 테스트 커버리지를 나타내 주는 라이브러리인 coverage를 설치한다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install coverage&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;coverage-설정&quot;&gt;Coverage 설정&lt;/h1&gt;
&lt;h2 id=&quot;coveragerc-파일-생성&quot;&gt;.coveragerc 파일 생성&lt;/h2&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi .coveragerc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;vim을 이용해서 간단하게 coveragerc 설정 파일을 생성.&lt;/p&gt;

&lt;h2 id=&quot;실행환경-설정&quot;&gt;실행환경 설정&lt;/h2&gt;
&lt;p&gt;[run] 헤더 이후에 설정을 적어주면 된다.&lt;br /&gt;
include = 테스트를 포함할 경로&lt;br /&gt;
omit = 테스트를 제외할 경로&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[run]
omit = ../virtualenvs/landlord_reputation_venv/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;기본적으로 project_root의 폴더들이 모두 포함되므로 위와 같이 가상환경만 제외했다.&lt;/p&gt;

&lt;h1 id=&quot;coverage-실행&quot;&gt;Coverage 실행&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;coverage run manage.py test&lt;/code&gt;로 테스트를 수행&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Creating test database for alias 'default'...
System check identified no issues (0 silenced).

----------------------------------------------------------------------
Ran 0 tests in 0.000s

OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 테스트를 수행한다.&lt;br /&gt;
현재는 아무런 테스트도 넣지 않은 상태&lt;/p&gt;

&lt;h1 id=&quot;리포트-보기&quot;&gt;리포트 보기&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;coverage report&lt;/code&gt;로 각각의 파일에 대한 리포트를 볼수 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Name                                    Stmts   Miss  Cover
-----------------------------------------------------------
landlord_reputation/__init__.py             0      0   100%
landlord_reputation/settings.py            20      0   100%
landlord_reputation/urls.py                 4      0   100%
landlord_reputation/views.py                8      0   100%
manage.py                                  13      6    54%
reputation/__init__.py                      0      0   100%
reputation/admin.py                         8      0   100%
reputation/apps.py                          3      0   100%
reputation/migrations/0001_initial.py       8      0   100%
reputation/migrations/__init__.py           0      0   100%
reputation/models.py                        9      0   100%
reputation/tests.py                         1      0   100%
reputation/urls.py                          3      0   100%
reputation/views.py                        90     65    28%
-----------------------------------------------------------
TOTAL                                     167     71    57%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;view 파일에 대해 하나도 테스트가 작성되지 않은 상태라 coverage가 매우 낮게 출력된다.&lt;/p&gt;

&lt;h1 id=&quot;리포트-html-형식으로-보기&quot;&gt;리포트 html 형식으로 보기&lt;/h1&gt;
&lt;p&gt;좀더 자세한 결과를 보기위해서 리포트를 Html 형식으로 출력할수도 있다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;coverage html&lt;/code&gt; 명령을 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;htmlcov/index.html&lt;/code&gt;로 리포트가 생성된다.&lt;/p&gt;

&lt;h2 id=&quot;리포트-형식&quot;&gt;리포트 형식&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-20/coverage_list.png&quot; alt=&quot;커버리지 리스트&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;리포트를-선택했을때-나오는-상세-결과&quot;&gt;리포트를 선택했을때 나오는 상세 결과&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-20/coverage_detail.png&quot; alt=&quot;커버리지 디테일&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;테스트-코드-작성하기&quot;&gt;테스트 코드 작성하기&lt;/h1&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.core.urlresolvers&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.test&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;reputation.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reputation&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReputationView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Reputation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_or_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sample address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;23.456789&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;123.4567890&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_template_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reputation:reputation_template&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;123.1234567&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23.456789&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;generic view Http 응답에 대한 테스트 코드를 삽입하였다.&lt;/p&gt;

&lt;h2 id=&quot;이후-다시-테스트를-수행한-결과&quot;&gt;이후 다시 테스트를 수행한 결과&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-20/coverage_detail2.png&quot; alt=&quot;커버리지 디테일&quot; /&gt;
커버리지가 조금 올라가고 붉은색으로 표시된 테스트 되지 않은 범위도 조금 줄어들었다.&lt;/p&gt;

&lt;p&gt;테스트 플랜을 짜고 좀더 상세한 Suite/Case를 작성해야겠지만 위 방법을 확장하여 테스트 커버리지를 높일 수 있다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>브라우저 CSS 캐쉬 무력화하기 및 Mac에서 Localhost 지정하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-19T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/css/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/mac%20%EC%82%AC%EC%9A%A9%ED%8C%81/2017/06/19/css-versioning</id>
   <content type="html">&lt;h1 id=&quot;브라우저-css-캐쉬-무력화하기&quot;&gt;브라우저 CSS 캐쉬 무력화하기&lt;/h1&gt;
&lt;p&gt;웹서비스를 제작하며 CSS 를 수정하다보면 분명 수정했는데도 불구하고 브라우저에 적용되지 않을때가 있다.&lt;br /&gt;
이는 브라우저가 기존의 CSS 파일을 캐쉬로 저장하고 있기 때문인데 간단하게 해결할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;해결방법&quot;&gt;해결방법&lt;/h2&gt;
&lt;p&gt;HTML에서 css 파일을 로딩하는 부분에 아래와 같이 버전번호를 인자로 추가하면 된다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;link href=&quot;/css/custom.css?v=1.0&quot; rel=&quot;stylesheet&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;django의-경우&quot;&gt;Django의 경우&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;link href=&quot;{% static '/css/custom.css' %}?v=1.0&quot; rel=&quot;stylesheet&quot;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;mac에서-localhost-지정하기&quot;&gt;Mac에서 Localhost 지정하기&lt;/h1&gt;
&lt;p&gt;IP 주소(127.0.0.1) 대신 localhost로 접근할때 localhost의 접속 IP를 설정하는 파일 위치는&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/private/etc/hosts&lt;/code&gt; 이다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo vi /private/etc/hosts&lt;/code&gt;와 같이 해당 파일을 편집기로 진입해 host이름과 ip 짝을 수정해주면 된다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>흐름에 따른 사고</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-18T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%EB%8F%85%EC%84%9C/%EB%8B%A8%EC%83%81/2017/06/18/thinking-flow</id>
   <content type="html">&lt;p&gt;우리는 무엇인가를 빠르게 습득하고 적용하기 위해 많은 부분들을 건너뛰곤 한다.&lt;br /&gt;
남들이 쌓아올린 경험과 지식의 결실을 빠르게 받아들이고 사용할 수 있는 능력이 실리와 직결되기도 한다.&lt;br /&gt;
하지만 더욱 깊이있는 발전을 위해서는 그러한 결실이 만들어지는 과정과 사고를 이해하는 것이 중요하다.&lt;br /&gt;
최첨단으로 보이는 결실들이 결국 많은 사람들의 고민과 시행착오 끝에 만들어 졌다는 사실을 인지하고,&lt;br /&gt;
그러한 고민들을 하게된 이유와 사고의 흐름을 쫓아보는 것이 지식에 대한 이해를 한단계 높여준다.&lt;br /&gt;
또한 이러한 사고의 흐름을 바탕으로 자신만의 고유한 해결책을 제시할 수 있게된다.&lt;/p&gt;

&lt;p&gt;빠른 결실을 바라는 사회에서 본질로 돌아가 고민하고 차근히 들여다 보는 것은 사회를 역행하는 것처럼 보이기에,&lt;br /&gt;
다들 혁신을 부르짓지만 진정한 혁신가라 불리는 이들이 정말 적은 이유가 아닐까.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;우리는 일상생활 속에서 일일이 기본원리로 되돌아가 생각할 수는 없습니다.&lt;br /&gt;
이것은 정신적으로 상당히 힘든 일입니다.&lt;br /&gt;
그래서 우리는 비슷한 것에 기초해서 미루어 추측하거나 타인을 흉내 내는 것으로 인생의 대부분을 보냅니다.&lt;br /&gt;
그러나 새로운 지평을 개척하거나 진정한 의미의 혁신을 일으키기 위해서는 기본원리에서부터의 접근이 필요합니다.&lt;br /&gt;
어떤 분야에서나 가장 기본적 진리를 찾고 거기서 다시 생각해야 합니다.&lt;br /&gt;
그러기 위해서는 정신적 노력이 필요합니다.      - &lt;strong&gt;Elon musk&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;수학의 발전사를 통해 수학적 사고의 발전을 보여주는 &lt;strong&gt;수학의 언어로 세상을 본다면&lt;/strong&gt;을 읽고…&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django를 이용한 포트폴리오 사이트 제작 (1) - 기획</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-17T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/17/django-portfolio-page-(1)</id>
   <content type="html">&lt;h1 id=&quot;발단&quot;&gt;발단&lt;/h1&gt;
&lt;p&gt;매주 토요일마다 여자친구와 공동 프로젝트(?)를 하고 있다.&lt;br /&gt;
미술적 재능과 공학이 만나 무엇인가 재미있는 것을 할수있지 않을까싶어 시작한 프로젝트인데,&lt;br /&gt;
사실 거창한 것은 없고, 짧은시간동안 뭔가 간단한 것이라도 만들어내는 것에 의미를 두고 있다.&lt;/p&gt;

&lt;p&gt;1주차에는 JQuery를 이용해 여자친구가 그린 그림을 이용해 간단한 애니메이션을 구현해 보았고,&lt;br /&gt;
2주차에는 Phaser Library를 이용해서 마우스 이벤트에 반응하는 간단한 인터랙션을 제작했다.&lt;/p&gt;

&lt;p&gt;기술적으로 볼때는 간단한 일이지만 여자친구 입장에서는 자신의 작품이 움직이는 것을 보니 신기한 모양이다.&lt;br /&gt;
그런 모습이 즐겁기도 하고, 나름 뿌듯하기도 해서 점점 프로젝트가 커져가고 있다.&lt;/p&gt;

&lt;p&gt;3주차인 이번주부터는 자신의 작품을 모아서 보여줄 수 있는 포트폴리오 사이트를 같이 제작해 보기로 했다.&lt;/p&gt;

&lt;h1 id=&quot;요구사항&quot;&gt;요구사항&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;최신 작업중인 작품을 보여주는 페이지&lt;/li&gt;
  &lt;li&gt;간단한 프로필 페이지 (Contact, Profile description, SNS 링크 등)&lt;/li&gt;
  &lt;li&gt;기존 작품 목록
    &lt;ul&gt;
      &lt;li&gt;목록을 선택하면 &lt;a href=&quot;https://issuu.com/&quot;&gt;ISSUU&lt;/a&gt;와 같은 책 형식으로 작품을 보여줄 수 있어야 함.&lt;/li&gt;
      &lt;li&gt;아날로그적인 느낌으로 책장을 넘기는 애니메이션이 있으면 좋겠음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사이드 프로젝트 목록
    &lt;ul&gt;
      &lt;li&gt;주 작업 외에 기타 작품들을 전시할 공간&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;요구사항-정리&quot;&gt;요구사항 정리&lt;/h1&gt;
&lt;p&gt;모든 페이지를 그냥 정적 페이지의 형태로 제작하는게 편할 것 같지만..&lt;br /&gt;
(작품 연재주기가 긴 만큼 그때그때 내가 받아서 업데이트 해주는것이 어려울 것이 없을 것 같다.)&lt;br /&gt;
그리하면 그냥 지루하고 단순한 작업이 될 것 같아 재미있을 것 같은 요소를 넣기로 했다.&lt;br /&gt;
사이트 레이아웃이나 구성방법 등은 같이 고민해가며 구현하면 될 것 같고,&lt;br /&gt;
이미지로된 시리즈 연재물을 최대한 유저가 편하게 업로드하고 관리할 수 있는 방법을 생각해 보아야 할 것 같다.&lt;/p&gt;

&lt;h1 id=&quot;다음주-목표&quot;&gt;다음주 목표&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;기본적인 목업 사이트 틀 잡기&lt;/li&gt;
  &lt;li&gt;책 형식으로 작품 보여주는 기능 구현&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Django를 이용한 건물주 평판 조회 서비스 제작 (4) - 구현 2일차</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-16T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/06/16/django-landlord-reputation-(4)</id>
   <content type="html">&lt;h1 id=&quot;구현-2일차&quot;&gt;구현 2일차&lt;/h1&gt;

&lt;h2 id=&quot;평판-디테일-뷰&quot;&gt;평판 디테일 뷰&lt;/h2&gt;
&lt;p&gt;검색한 위치에서 평판을 등록할 수 있게하고, 맵을 띄워주었다.&lt;br /&gt;
지도를 선택해서 마커를 이동하면 해당 위치에서 평판을 등록할 수 있도록 했다.&lt;/p&gt;

&lt;h2 id=&quot;로그인로그아웃회원가입&quot;&gt;로그인/로그아웃/회원가입&lt;/h2&gt;
&lt;p&gt;Django의 기본 Auth를 이용하여 제작했다.&lt;br /&gt;
Django의 기능이 강력해서 구현 자체는 금방 끝났으나 UI를 다듬는대 생각보다 많은 시간이 걸렸다.&lt;br /&gt;
여전히 Look이 마음에 들진 않는다…&lt;/p&gt;

&lt;h1 id=&quot;스크린샷&quot;&gt;스크린샷&lt;/h1&gt;
&lt;h2 id=&quot;홈&quot;&gt;홈&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-16/home.png&quot; alt=&quot;홈화면&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;검색결과-평판이-있을때-평판으로-이동할-수-있는-화면&quot;&gt;검색결과 (평판이 있을때 평판으로 이동할 수 있는 화면)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-16/list-without-repu.png&quot; alt=&quot;검색결과(평판없음)&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;검색결과-평판이-없을때-검색한-주소에-추가할-수-있는-화면&quot;&gt;검색결과 (평판이 없을때 검색한 주소에 추가할 수 있는 화면)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-16/list-without-repu.png&quot; alt=&quot;검색결과(평판없음)&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;로그인&quot;&gt;로그인&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-16/login.png&quot; alt=&quot;로그인&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;회원가입-에러-메시지-출력-화면&quot;&gt;회원가입 (에러 메시지 출력 화면)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-16/register-with-error.png&quot; alt=&quot;회원가입(에러)&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;맵뷰&quot;&gt;맵뷰&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-16/mapview.png&quot; alt=&quot;맵뷰&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;고생한-점&quot;&gt;고생한 점&lt;/h1&gt;
&lt;p&gt;2일차 구현은 딱히 어려웠던 점은 없다. UI가 고쳐도 고쳐도 맘에 썩 들지 않는다는 점만 빼면…&lt;/p&gt;

&lt;h1 id=&quot;진행률&quot;&gt;진행률&lt;/h1&gt;
&lt;p&gt;기본적인 기능 구현은 전부 완료했다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;평판 등록/조회 기능&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;회원가입/로그인 기능&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;주소 검색 기능&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;100%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;100%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;100%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;더불어 지난주 계획도 얼추 완료했다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;del&gt;로그인/회원가입 등 구현&lt;/del&gt; &lt;strong&gt;완료&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;가입한 사용자만 정보를 등록할 수 있도록 구현&lt;/del&gt; &lt;strong&gt;완료&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;디테일뷰에서 DB에 평판 추가하는 부분 구현&lt;/del&gt; &lt;strong&gt;완료&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;UI/UX 개선&lt;/del&gt; &lt;strong&gt;완료&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;6/18일까지 MVP를 제작한다는 일정은 맞춘듯 하다.&lt;br /&gt;
전체 프로젝트 목표까지는 아직 조금더 할일이 남긴 했다.&lt;/p&gt;

&lt;h1 id=&quot;다듬기&quot;&gt;다듬기&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;계정 생성시 간단한 인증코드 삽입&lt;/li&gt;
  &lt;li&gt;테스트 코드 삽입
    &lt;ul&gt;
      &lt;li&gt;간단한 코드라도 테스트 코드 넣는 습관 들이자..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;릴리즈용으로 코드 정리
    &lt;ul&gt;
      &lt;li&gt;Dev/Production 환경을 나누고 여러 키들 노출되지 않도록 처리할 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Django를 이용한 건물주 평판 조회 서비스 제작 (3) - 구현 1일차</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-15T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/06/15/django-landlord-reputation-(3)</id>
   <content type="html">&lt;h1 id=&quot;구현-1일차&quot;&gt;구현 1일차&lt;/h1&gt;
&lt;h2 id=&quot;메인화면&quot;&gt;메인화면&lt;/h2&gt;
&lt;p&gt;부트스트랩을 이용해서 간단히 홈화면을 꾸미고, Navbar 및 footer를 생성.&lt;br /&gt;
중앙에는 평판을 검색할 수 있는 검색창을 추가했다.&lt;br /&gt;
검색창에서 주소를 검색하면, Naver Geocoder API를 이용해 주소를 위/경도로 변환해 주었다.&lt;/p&gt;

&lt;h2 id=&quot;검색-리스트&quot;&gt;검색 리스트&lt;/h2&gt;
&lt;p&gt;올바른 주소가 검색되었을때 이미 평판이 있으면 해당 평판을 볼수있는 링크를 보여주게 구현하였다.&lt;br /&gt;
DB내에 평판이 없을 경우 평판이 없음을 보여주고, 마찬가지로 링크를 선택하면 평판을 추가할수 있는 화면으로&lt;br /&gt;
이동하게 했다.&lt;/p&gt;

&lt;h2 id=&quot;평판-디테일-뷰&quot;&gt;평판 디테일 뷰&lt;/h2&gt;
&lt;p&gt;네이버 지도 API를 통해 검색한 주소의 마커를 보여주고, 평판을 추가할 수 있는 폼을 생성했다.&lt;br /&gt;
지도상에서 맵을 선택하면 해당 위치에 평판을 추가할 수 있도록 하고, 평판이 있다면 보여주도록 했다.&lt;/p&gt;

&lt;h1 id=&quot;고생한-점&quot;&gt;고생한 점&lt;/h1&gt;
&lt;p&gt;Naver Geocoder에서 주소를 찾지 못할때 &lt;code class=&quot;highlighter-rouge&quot;&gt;404 Not Found&lt;/code&gt;를 날려주는 것을 모르고 있다가 한참 헤맸다.&lt;br /&gt;
&lt;strong&gt;문서를 잘 읽자는 교훈&lt;/strong&gt; &lt;a href=&quot;https://developers.naver.com/docs/map/overview/&quot;&gt;네이버 지도 API 명세 - 5. 에러 코드 참조&lt;/a&gt;&lt;br /&gt;
또한 경도/위도의 자릿수를 8, 9자리에 6자리 소숫점 고정으로 생각하고 있다가,&lt;br /&gt;
경도/위도의 소숫점 아래 자리수가 7자리수인 좌표들이 등장하며 url 패턴에 맞지 않는 url들이 나와&lt;br /&gt;
계속 오류가 나는 것을 알아채지 못하고 한참 삽질을 했다.&lt;br /&gt;
굳이 Redirect가 필요하지 않은 것을 한단계 더 거쳐가는 형식으로 구현했다가 수정했다.&lt;br /&gt;
간단하다고 설계를 할때 깊게 생각하지 않으면 구현하면서 고생한다는 것을 다시금 깨달았다.&lt;/p&gt;

&lt;h1 id=&quot;진행률&quot;&gt;진행률&lt;/h1&gt;
&lt;p&gt;기본적인 기능 구현은 2/3 정도 끝난것 같다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;평판 등록/조회 기능&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;회원가입/로그인 기능&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;주소 검색 기능&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;80%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;20%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;100%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;추후-일정&quot;&gt;추후 일정&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;로그인/회원가입 등 구현&lt;/li&gt;
  &lt;li&gt;가입한 사용자만 정보를 등록할 수 있도록 구현&lt;/li&gt;
  &lt;li&gt;디테일뷰에서 DB에 평판 추가하는 부분 구현&lt;/li&gt;
  &lt;li&gt;UI/UX 개선&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;일주일내로 기본 기능을 완성하기로 한 일정을 맞출 수 있을 것 같다.&lt;br /&gt;
여전히 개선할 부분과 디테일 개선은 갈길이 멀긴 하다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django를 이용한 건물주 평판 조회 서비스 제작 (2) - DB 구성, 외부 라이브러리</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-14T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/06/14/django-landlord-reputation-(2)</id>
   <content type="html">&lt;h1 id=&quot;db-구성&quot;&gt;DB 구성&lt;/h1&gt;
&lt;h2 id=&quot;reputation-테이블&quot;&gt;Reputation 테이블&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;ID&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Longitude&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Latitude&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Description&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Created_date&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Primary Key&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;경도&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;위도&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;평판&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;레코드 생성 날짜&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;app-구성-및-외부-라이브러리&quot;&gt;App 구성 및 외부 라이브러리&lt;/h1&gt;
&lt;h2 id=&quot;app-구성&quot;&gt;App 구성&lt;/h2&gt;
&lt;p&gt;평판 조회/출력하는 단일 app으로 구성&lt;/p&gt;

&lt;h2 id=&quot;주소검색-라이브러리&quot;&gt;주소검색 라이브러리&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.juso.go.kr/addrlink/main.do&quot;&gt;주소검색솔루션&lt;/a&gt;&lt;br /&gt;
행정자치부에서 만든 솔루션이다.&lt;br /&gt;
자체적으로 서버에 솔루션을 설치해야 하기에 간단히 제작한다는 취지에 너무 과하다는 생각이 들어 패스했다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.naver.com/docs/map/javascriptv3/&quot;&gt;네이버맵스&lt;/a&gt;&lt;br /&gt;
간단하고 쓰기편한 네이버 지도 API 선택.&lt;/p&gt;

&lt;h2 id=&quot;프론트엔드-라이브러리&quot;&gt;프론트엔드 라이브러리&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://http://getbootstrap.com/&quot;&gt;부트스트랩&lt;/a&gt;&lt;br /&gt;
프론트엔드는 그냥 고민없이 부트스트랩으로…&lt;/p&gt;

&lt;h1 id=&quot;추후-일정&quot;&gt;추후 일정&lt;/h1&gt;
&lt;p&gt;Generic View, Admin 기능 등.. 최대한 장고 자체의 기능을 이용해서 빨리빨리 MVP 구현.&lt;br /&gt;
이후 저번 프로젝트와는 다른쪽에 중점을 두고 개선/확장 예정&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Pycharm Community 에디션에 Django 가상환경으로 세팅하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-13T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/2017/06/13/django-pycharm-project-venv</id>
   <content type="html">&lt;h1 id=&quot;pycharm-community-에디션에-django-가상환경으로-세팅&quot;&gt;Pycharm Community 에디션에 Django 가상환경으로 세팅&lt;/h1&gt;
&lt;p&gt;Pycharm Professional Edition과 다르게 Community Edition은 Django와 같은 프로젝트를 직접 생성할 수 없다.&lt;br /&gt;
결국 설정을 위해서 약간의 번거로운 작업이 필요하다.&lt;/p&gt;

&lt;h2 id=&quot;가상환경-설정&quot;&gt;가상환경 설정&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python -m venv my-virtualenv&lt;/code&gt;
my-virtualenv라는 이름의 가상환경 생성&lt;/p&gt;

&lt;h2 id=&quot;가상환경-실행&quot;&gt;가상환경 실행&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;source my-virtualenv/bin/activate&lt;/code&gt;&lt;br /&gt;
가상환경이 실행되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;(my-virtualenv) 프롬프트 이름$&lt;/code&gt;와 같이 프롬프트가 변경된다.&lt;br /&gt;
이 상태에서는 어떤 폴더로 이동하든 가상환경이 실행된 상태이다.&lt;/p&gt;

&lt;h2 id=&quot;django-설치&quot;&gt;Django 설치&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install django&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;django-project-생성&quot;&gt;Django project 생성&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;django-admin startproject 프로젝트이름&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-설정&quot;&gt;Git 설정&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt; &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;first commit&quot;&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add origin https://github.com/프로젝트github.git&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin master&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;pycharm-설정&quot;&gt;Pycharm 설정&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Pycharm 커뮤니티 에디션 실행, 프로젝트 폴더 위치 선택하여 프로젝트 열기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘&lt;/code&gt;+&lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt; 입력하여 Preference 창 출력&lt;/li&gt;
  &lt;li&gt;Project -&amp;gt; Project Interpreter 선택&lt;/li&gt;
  &lt;li&gt;맨 위의 Prject Interpreter 선택 창 옆의 설정 아이콘 선택 -&amp;gt; Add local&lt;/li&gt;
  &lt;li&gt;생성한 가상환경 폴더의 /bin/python3 선택 -&amp;gt; Apply&lt;/li&gt;
  &lt;li&gt;Run -&amp;gt; Edit configurations 선택&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 선택 후 Python 선택하여 새로운 환경 설정 생성 후 이름 지정&lt;/li&gt;
  &lt;li&gt;Script: 프로젝트 폴더의 manage.py 선택, Script parameters: runserver&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;pycharm에서-가상환경으로-작업&quot;&gt;Pycharm에서 가상환경으로 작업&lt;/h2&gt;
&lt;p&gt;이제 커맨드라인에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;deactivate&lt;/code&gt;를 입력해 가상환경을 종료해도 Pycharm안에서 모두 해결 가능하다.&lt;br /&gt;
패키지를 인스톨하고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘&lt;/code&gt;+&lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt; 입력 후 Project Interpreter 항목의 리스트에서 선택하면 되고,&lt;br /&gt;
테스트 서버를 실행하고 싶다면 간단히 &lt;code class=&quot;highlighter-rouge&quot;&gt;⌃&lt;/code&gt;+&lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt;이나 재생버튼(?)을 선택하여 실행할 수 있다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django를 이용한 건물주 평판 조회 서비스 제작 (1) - 기획</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-12T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C/2017/06/12/django-landlord-reputation-(1)</id>
   <content type="html">&lt;h1 id=&quot;발단&quot;&gt;발단&lt;/h1&gt;

&lt;p&gt;1일 1커밋/포스팅의 압박에 무엇이라도 만들어내야 한다는 부담이 들기 시작했다.&lt;br /&gt;
누구에게 보여주고자 한 것도 아니고 스스로 한 약속이지만 부담이 있는 것은 사실이다.&lt;br /&gt;
다행히 아직까지는 그러한 부담이 긍정적으로 작용하는 것 같다.&lt;br /&gt;
&lt;br /&gt;
지난 프로젝트 이후 느낀 점이지만 프로젝트가 커지는 경우 디버깅과 완성도의 압박에 프로젝트의 흥미를 잃게 된다.&lt;br /&gt;
그런 것을 방지하고자 최대한 간단한 기능과 구조로 출발하기로 했다.&lt;br /&gt;
사실 그런것보다 “다작”하기로 결심한 이후 무엇을 만들 것인가를 결정하는 것이 더 어려운 편이다.&lt;br /&gt;
다행히 이번에는 아이디어를 제공하는 사건이 있어 그것을 토대로 서비스를 만들기로 했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;지인이 사무실을 이전하는데 이전 사무실 건물주가 에어컨을 떼는 날 잠적하거나,&lt;br /&gt;
이런저런 일로 꼬투리를 잡아가며 한푼이라도 더 뜯어가려는(?) 행태를 보였다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이에 대해 이야기하다 기존 집주인/건물주의 평판을 조회할 수 있는 서비스를 제작해 보기로 했다.&lt;/p&gt;

&lt;h1 id=&quot;요구사항&quot;&gt;요구사항&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Google/Naver등 Map 서비스를 바탕으로 특정 위치의 건물주의 평판을 등록/조회할 수 있게 한다.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;간단한 토론이 일어날 수 있도록 등록된 평판에 댓글 기능을 지원한다.&lt;/del&gt; 그냥 평판이 여러개 등록되면 될듯 하다.&lt;/li&gt;
  &lt;li&gt;회원가입 시 간단한 인증 절차를 통해 인증되지 않은 회원은 평판&lt;del&gt;/댓글&lt;/del&gt;을 등록할 수 없게 한다.&lt;/li&gt;
  &lt;li&gt;주소/위치 검색등을 통해 해당 위치의 평판을 보여주는 기능을 갖춘다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;목표&quot;&gt;목표&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;간결한 UI/UX&lt;/li&gt;
  &lt;li&gt;테스트 코드 삽입&lt;/li&gt;
  &lt;li&gt;Heroku등 무료 서비스를 이용한 퍼블리싱&lt;/li&gt;
  &lt;li&gt;REST API를 제작하여 App으로 연동 (옵션)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;추가-목표&quot;&gt;추가 목표&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;안드로이드 App 연동&lt;/li&gt;
  &lt;li&gt;1주일 내 MVP 완성 (~6/18일)&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Phaser를 이용한 간단 인터랙션 제작</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-11T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//javascript/2017/06/11/phaser-interaction</id>
   <content type="html">&lt;h1 id=&quot;phaser란&quot;&gt;Phaser란&lt;/h1&gt;
&lt;p&gt;HTML5의 Canvas및 WebGL을 이용해 Web game을 제작할 수 있게 해주는 Javascript 라이브러리&lt;br /&gt;
Phaser를 테스트 하기 위해서는 로컬 웹서버를 실행해야 한다.&lt;br /&gt;
Python이 깔려있다면 Python의 기본 웹서버를 이용하면 간단하다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python -m SimpleHTTPServer&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;구조&quot;&gt;구조&lt;/h1&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Phaser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Phaser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AUTO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 전역 변수 정의를 통해 width * height 크기의 게임창을 생성한다.&lt;br /&gt;
크게 preload, create, update의 세 메소드로 나뉘어져 있다.&lt;/p&gt;

&lt;h2 id=&quot;preload&quot;&gt;Preload&lt;/h2&gt;
&lt;p&gt;게임 실행전에 실행되는 메소드로 주로 이미지나 기타 자료의 로딩에 쓰인다.&lt;/p&gt;

&lt;h2 id=&quot;create&quot;&gt;Create&lt;/h2&gt;
&lt;p&gt;게임이 실제적으로 생성될때 실행되는 메소드로 로딩된 이미지를 출력하거나 리스너를 할당하거나 등의 작업을 한다.&lt;/p&gt;

&lt;h2 id=&quot;update&quot;&gt;Update&lt;/h2&gt;
&lt;p&gt;주기적으로 실행되는 메소드로 주로 키 이벤트를 할당하거나 게임의 개체들을 업데이트 하는 등의 작업을 한다.&lt;/p&gt;

&lt;h1 id=&quot;간단한-결과물&quot;&gt;간단한 결과물&lt;/h1&gt;
&lt;p&gt;사용자의 마우스 이벤트에 반응해서 이미지의 알파값을 변경시켜 출력 시켜주는 애니메이션 예제&lt;br /&gt;
&lt;a href=&quot;http://minimi.surge.sh/&quot;&gt;Phaser로 제작한 간단한 결과물&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;추후-계획&quot;&gt;추후 계획&lt;/h1&gt;
&lt;p&gt;주 1회 협업, 매번 간단한 인터렉션 제작 (장기적으로는 게임이 될 수도…)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django 프로젝트 Heroku에 릴리즈하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-10T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/10/django-project-heroku</id>
   <content type="html">&lt;h1 id=&quot;기존-django-프로젝트-heroku에-릴리즈&quot;&gt;기존 Django 프로젝트 Heroku에 릴리즈&lt;/h1&gt;

&lt;h2 id=&quot;heroku-cli-설치&quot;&gt;Heroku CLI 설치&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install heroku&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;gunicorn을-추가&quot;&gt;gunicorn을 추가&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install gunicorn&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;gunicorn 설정시 폴더구조는&lt;br /&gt;
메인 -&lt;br /&gt;
       |- 프로젝트&lt;br /&gt;
       |- 다른 앱&lt;br /&gt;
폴더 구조가 다르면 gunicorn module 임포트를 적절히 수정해 줘야 한다.&lt;/p&gt;

&lt;h2 id=&quot;procfile-추가&quot;&gt;Procfile 추가&lt;/h2&gt;
&lt;p&gt;프로젝트 루트에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Procfile&lt;/code&gt;을 추가하고 다음 내용을 저장한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;web: gunicorn myproject.wsgi --log-file -&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;runtimetxt-추가&quot;&gt;runtime.txt 추가&lt;/h2&gt;
&lt;p&gt;프로젝트 루트에 &lt;code class=&quot;highlighter-rouge&quot;&gt;runtime.txt&lt;/code&gt;을 추가하고 다음 내용을 저장한다. (파이썬 3.# 일 경우)&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;python-3.6.1&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;dj-database-url-추가&quot;&gt;dj-database-url 추가&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install dj-database-url&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이후 프로젝트의 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;파일에&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dj_database_url&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;db_from_env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dj_database_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn_max_age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_from_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;를 추가한다.&lt;/p&gt;

&lt;h2 id=&quot;whitenoise-추가&quot;&gt;whitenoise 추가&lt;/h2&gt;
&lt;p&gt;장고는 기본적으로 프로덕션에서 스태틱 파일을 제공하지 않는다.&lt;br /&gt;
whitenoise는 개발 환경 그대로 스태틱 파일을 제공하게 해준다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install whitenoise&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;에 다음 내용을 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;STATIC_ROOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASE_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'staticfiles'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;STATICFILES_STORAGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'whitenoise.django.GzipManifestStaticFilesStorage'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wsgi.py&lt;/code&gt;에 다음 내용을 추가한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.core.wsgi import get_wsgi_application
from whitenoise.django import DjangoWhiteNoise

application = get_wsgi_application()
application = DjangoWhiteNoise(application)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;requirementstxt-생성&quot;&gt;requirements.txt 생성&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;를 입력하여 사용된 패키지를 추출한다.&lt;/p&gt;

&lt;h2 id=&quot;allowed-host-추가&quot;&gt;ALLOWED Host 추가&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;ALLOWED_HOSTS = ['*']&lt;/code&gt;를 추가한다.&lt;/p&gt;

&lt;h2 id=&quot;추가사항&quot;&gt;추가사항&lt;/h2&gt;
&lt;p&gt;DEBUG=False 일때 Whitenoise와 Heroku의 충돌이 있다.&lt;br /&gt;
해결방법은 &lt;a href=&quot;https://minyoungjung.github.io/파이썬/django/웹서비스/2017/06/25/django-landlord-reputation-(5)/&quot;&gt;Django를 이용한 건물주 평판 조회 서비스 제작 (5) - Heroku 업로드&lt;/a&gt; 여기서 확인&lt;/p&gt;

&lt;h2 id=&quot;heroku에-로그인&quot;&gt;Heroku에 로그인&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku login&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;heroku-앱-생성&quot;&gt;Heroku 앱 생성&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku create&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;heroku create
Creating app... done, ⬢ calm-basin-17299
https://calm-basin-17299.herokuapp.com/ | https://git.heroku.com/calm-basin-17299.git

Git remote heroku added
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;heroku를-git-remote로-추가&quot;&gt;Heroku를 git remote로 추가&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add heroku https://git.heroku.com/calm-basin-17299.git&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;db가-생성되어-있지-않다면-생성&quot;&gt;db가 생성되어 있지 않다면 생성&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku run python manage.py migrate&lt;/code&gt;&lt;br /&gt;
간혹 dev와 production 환경의 db가 다를 경우 db 생성이 되지 않은 상태라 push가 제대로 되지 않는다.&lt;/p&gt;

&lt;h1 id=&quot;슈퍼유저-생성&quot;&gt;슈퍼유저 생성&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku run python manage.py createsuperuser&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;commit하고-heroku에-push&quot;&gt;commit하고 Heroku에 push&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push heroku master&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;만약-matpolib을-쓴다면-헤로쿠와-충돌이-일어난다&quot;&gt;만약 matpolib을 쓴다면… 헤로쿠와 충돌이 일어난다&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import matplotlib
matplotlib.use('Agg')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;import matplotlib.pyplot as plt, mpld3&lt;/code&gt; 전에 추가한다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django를 이용한 스케쥴러 제작 (2) - 구현</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-09T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/09/django-scheduler-(2)</id>
   <content type="html">&lt;h1 id=&quot;구현&quot;&gt;구현&lt;/h1&gt;
&lt;h2 id=&quot;todolist&quot;&gt;Todolist&lt;/h2&gt;
&lt;p&gt;Django의 Generic view를 이용해 구현했다.&lt;br /&gt;
TodayArchiveView/DayArchiveView를 이용해 해당 날짜의 할일들을 보여주었다.&lt;/p&gt;

&lt;h2 id=&quot;calendar&quot;&gt;Calendar&lt;/h2&gt;
&lt;p&gt;Python standard library의 HTMLCalendar를 이용해 구현했다.&lt;br /&gt;
지난달/다음달로 이동할 수 있는 화살표를 추가하고, Workout 테이블을 조회하여 리스트를 해당 날짜에 뿌려주었다.&lt;/p&gt;

&lt;h2 id=&quot;stats&quot;&gt;Stats&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;id&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;create_date&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;workout_done&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;owner_id&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;workout_id&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;duration&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;workout_date&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;PK&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;생성일&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;운동 수행여부&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;소유자&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;FK(List)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;수행시간(분)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;수행 날짜&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Workout 테이블에서 owner를 필터로 쿼리셋을 뽑아낸 후, duration의 평균을 구해 matplotlib으로 출력하였다.&lt;br /&gt;
별도의 DB 테이블에 각각의 평균값을 운동 수행 결과 표시 시마다 계산하여 저장하고,&lt;br /&gt;
해당 테이블을 조회하는 것이 훨씬 빠르겠지만, 일단은 나 혼자 쓰는 서비스니까 그냥 전체 DB를 검색하기로 결정.&lt;br /&gt;
Django 철학에도 있지않은가.. &lt;code class=&quot;highlighter-rouge&quot;&gt;Simple is better than complex&lt;/code&gt; &lt;del&gt;이럴때 쓰란말은 아니지만…&lt;/del&gt;
&lt;br /&gt;
여러 종류의 그래프를 통해 다양한 그래프를 출력하고 싶었지만, 막상 데이터가 여러 방법으로 보여줄 것이 없었다.&lt;br /&gt;
워낙 DB 구성이 단순하니까… 나중에 더 생각나면 추가하기로 했다.&lt;/p&gt;

&lt;h2 id=&quot;로그인관리자-기능&quot;&gt;로그인/관리자 기능&lt;/h2&gt;
&lt;p&gt;Django의 기본 Auth와 Admin을 이용했다.&lt;br /&gt;
혼자 쓰는 서비스이지만 결국 웹에 올려놓을 테니.. 로그인 기능이 필요하긴 했다.&lt;/p&gt;

&lt;h1 id=&quot;스크린샷&quot;&gt;스크린샷&lt;/h1&gt;
&lt;h2 id=&quot;todolist-1&quot;&gt;Todolist&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-09/todolist.png&quot; alt=&quot;할일목록&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;calendar-1&quot;&gt;Calendar&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-09/calendar.png&quot; alt=&quot;캘린더&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;stats-1&quot;&gt;Stats&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-09/stats.png&quot; alt=&quot;그래프&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;모바일-대응-메뉴&quot;&gt;모바일 대응 메뉴&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-09/mobile-react.png&quot; alt=&quot;모바일 대응&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;마무리&quot;&gt;마무리&lt;/h1&gt;
&lt;p&gt;간단히 시작한 프로젝트였지만, 막상 너무 간단한게 아닌가하는 생각이 들어 무엇인가를 추가하려 했다.&lt;br /&gt;
하지만 기능은 추가하고 싶고 마땅히 추가할 기능은 없고… 점점 본질에서 멀어져가며 흥미가 떨어지는 것을 느끼고,&lt;br /&gt;
이러다가는 프로젝트를 완성하지도 못할 것 같아 다시 초심으로 돌아가 간단히 마무리했다.&lt;br /&gt;
일단은 이것으로 프로젝트 구현을 마치고, 스스로 사용해보고 마음에 들면 개선하고 추가해 볼 생각이다.&lt;/p&gt;

&lt;h1 id=&quot;추후-계획&quot;&gt;추후 계획&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;각종 버그 수정… (귀찮지 않다면…)&lt;/li&gt;
  &lt;li&gt;데이터 분석 및 그래프 기능 확장&lt;/li&gt;
  &lt;li&gt;데이터 입력 기능 편하게 만들기 (현재는 혼자 쓰니 그냥 어드민으로 넣음..)&lt;/li&gt;
  &lt;li&gt;간단한 소셜 기능 (옵션)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;서비스-링크&quot;&gt;서비스 링크&lt;/h1&gt;
&lt;p&gt;간단히 무료 Dyno를 통해 Heroku에 올려두었다.&lt;br /&gt;
DB row도 10000줄까지 밖에 지원하지 않지만 혼자쓰니 문제없겠지..&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://workoutcal.herokuapp.com&quot;&gt;https://workoutcal.herokuapp.com&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Django를 이용한 스케쥴러 제작 (1) - 정의 및 구성</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-08T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/django/%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4/2017/06/08/django-scheduler-(1)</id>
   <content type="html">&lt;h1 id=&quot;발단&quot;&gt;발단&lt;/h1&gt;
&lt;p&gt;1일 1커밋을 생활화하기 위해 Django를 이용한 간단한 서비스를 만들기로 했다.&lt;br /&gt;
운동을 좋아하는 만큼 운동 스케쥴러를 작성하기로 했고, 프로젝트 목표와 개발 방향을 설정했다.&lt;/p&gt;

&lt;h1 id=&quot;목표&quot;&gt;목표&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;스스로 사용할 만한 서비스 구축&lt;/li&gt;
  &lt;li&gt;깔끔한 디자인&lt;/li&gt;
  &lt;li&gt;확장성(?)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;요구사항&quot;&gt;요구사항&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;일정을 추가할 수 있고, 일별/월별 보기가 가능할 것&lt;/li&gt;
  &lt;li&gt;당일 해야할 운동 종류를 표시하며, 해당 Todo 리스트에서 수행 여부를 표시할 수 있을 것&lt;/li&gt;
  &lt;li&gt;수행한 항목의 수행 시간에 비율을 그래프로 출력할 것&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;db-구성&quot;&gt;DB 구성&lt;/h1&gt;
&lt;p&gt;크게 운동 종류를 나타낸 Category 테이블을 만들고, 카테고리 테이블을 Foreign key로 이용한 List 테이블,&lt;br /&gt;
마지막으로 각각의 개별 운동을 나타내는 Workout 테이블을 생성했다.&lt;br /&gt;
테이블 상세 구성은 아래와 같다.&lt;/p&gt;

&lt;h2 id=&quot;workout-list-테이블&quot;&gt;Workout List 테이블&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;id&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;workout_title&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;category_id&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;PK&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;개별 운동 이름&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;FK(Category)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;workout-category-테이블&quot;&gt;Workout Category 테이블&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;id&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;category_name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;PK&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;운동 카테고리 이름&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;workout-테이블&quot;&gt;Workout 테이블&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;id&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;create_date&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;workout_done&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;owner_id&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;workout_id&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;duration&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;workout_date&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;PK&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;생성일&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;운동 수행여부&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;소유자&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;FK(List)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;수행시간(분)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;수행 날짜&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;app-구성-및-외부-라이브러리&quot;&gt;App 구성 및 외부 라이브러리&lt;/h1&gt;
&lt;p&gt;App은 할일을 출력하는 todolist, 월별 목록을 출력하는 calendar,&lt;br /&gt;
그래프를 출력하는 stats의 세 부분으로 구성되어 있다.&lt;/p&gt;

&lt;p&gt;전체적인 Look&amp;amp;Feel은 심플한 Material Design 형태로 가기로 하고, &lt;a href=&quot;http://materializecss.com/getting-started.html&quot;&gt;Materialize&lt;/a&gt;를 이용했다.&lt;br /&gt;
그래프를 출력하기 위해서는 &lt;a href=&quot;https://github.com/plotly/plotly.py&quot;&gt;Plotly&lt;/a&gt;와 &lt;a href=&quot;https://matplotlib.org/gallery.html&quot;&gt;Matplotlib&lt;/a&gt;을 고민하다 최종적으로 matplotlib으로 결정하였다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://minyoungjung.github.io/파이썬/django/웹서비스/2017/06/09/django-scheduler-(2)/&quot;&gt;Django를 이용한 스케쥴러 제작 (2) - 구현&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Python 가상환경 옮기기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-07T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/2017/06/07/python-venv-export</id>
   <content type="html">&lt;h1 id=&quot;발단&quot;&gt;발단&lt;/h1&gt;
&lt;p&gt;가상환경을 이용한 로컬 프로젝트에서 matplotlib을 임포트 하려니 임포트 에러가 발생했다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(tensorflow_venv) My-MacBook-Pro:tensorflow_demo mymacpro$ python3 linearregression.py 
Traceback (most recent call last):
File &quot;linearregression.py&quot;, line 14, in &amp;lt;module&amp;gt;
import matplotlib.pyplot as plt
File &quot;/Users/mymacpro/Documents/Python_workspace/tensorflow_demo/tensorflow_venv/lib/python3.6/site-packages/matplotlib/pyplot.py&quot;, line 115, in &amp;lt;module&amp;gt;
_backend_mod, new_figure_manager, draw_if_interactive, _show = pylab_setup()
File &quot;/Users/mymacpro/Documents/Python_workspace/tensorflow_demo/tensorflow_venv/lib/python3.6/site-packages/matplotlib/backends/__init__.py&quot;, line 32, in pylab_setup
globals(),locals(),[backend_name],0)
File &quot;/Users/mymacpro/Documents/Python_workspace/tensorflow_demo/tensorflow_venv/lib/python3.6/site-packages/matplotlib/backends/backend_macosx.py&quot;, line 19, in &amp;lt;module&amp;gt;
from matplotlib.backends import _macosx
RuntimeError: Python is not installed as a framework. The Mac OS X backend will not be able to function correctly if Python is not installed as a framework. See the Python documentation for more information on installing Python as a framework on Mac OS X. Please either reinstall Python as a framework, or try one of the other backends. If you are using (Ana)Conda please install python.app and replace the use of 'python' with 'pythonw'. See 'Working with Matplotlib on OSX' in the Matplotlib FAQ for more information.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;라이브러리의 FAQ를 보니 virtualenv 대신에 venv를 이용하여 가상환경을 이용하란다.&lt;/p&gt;

&lt;h1 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 freeze &amp;gt; requirements.txt&lt;/code&gt;로 기존 가상환경의 패키지 리스트를 추출한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python3 -m venv myvenv&lt;/code&gt;로 myenv라는 새로운 가상환경을 만든다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;source myvenv/bin/activate&lt;/code&gt;로 myenv 가상환경을 실행한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install -r requirements.txt&lt;/code&gt;를 통해 전에 있던 가상환경에서 추출한 패키지 리스트를 다시 설치한다.&lt;/li&gt;
  &lt;li&gt;필요하다면 (기존 가상환경을 삭제한다.)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;결과&quot;&gt;결과&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-07/matplotlib_plot.png&quot; alt=&quot;그래프&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Git Merge 충돌 해결 원인 파악하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-06T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//git/2017/06/06/git-conflic-solving</id>
   <content type="html">&lt;h1 id=&quot;발단&quot;&gt;발단&lt;/h1&gt;

&lt;p&gt;로컬의 프로젝트를 Github로 푸쉬하려는데 문제가 발생했다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(workoutscheduler) My-MacBook-Pro:workoutscheduler mymacpro$ git push origin master
To https://github.com/MinyoungJung/workoutscheduler_project.git
! [rejected]        master -&amp;gt; master (non-fast-forward)
error: failed to push some refs to 'https://github.com/MinyoungJung/workoutscheduler_project.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;메시지를 보니 Github 브랜치 내용이 로컬의 브랜치 내용보다 최신이란다.&lt;/p&gt;

&lt;h1 id=&quot;해결-방안&quot;&gt;해결 방안&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push -f&lt;/code&gt;를 통해 강제로 푸쉬한다.&lt;br /&gt;
사실 혼자 로컬에서 작업하는 프로젝트다보니 Github 내용이 더 최신이 된 것 자체가 이상한 상황이고,&lt;br /&gt;
로컬의 코드를 그냥 푸쉬해서 덮어씌워도 아무 문제 없으나 아무래도 찜찜한 것이 사실.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gitk HEAD @{u}&lt;/code&gt; 명령어로 upstream branch와 현재 헤드의 차이를 확인한다.
&lt;img src=&quot;/post_assets/2017-06-06/conflict.png&quot; alt=&quot;머지 충돌&quot; /&gt;
master와 origin 사이의 충돌이 생긴 이유가 명확해졌다.&lt;br /&gt;
project setting에서 github page를 생성했더니, 그에 대한 파일이 변경된 것이 로컬에서는 반영되지 않은 것.&lt;br /&gt;
원인을 파악했으니 편안한 맘으로 강제로 푸쉬할 수 있게 되었다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>파이썬 오브젝트 소스코드 간단히 보기 및 스탠다드 라이브러리 메소드 오버라이딩</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-05T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%8C%8C%EC%9D%B4%EC%8D%AC/2017/06/05/overriding-python-standard-library</id>
   <content type="html">&lt;h1 id=&quot;파이썬-오브젝트-소스-코드-보기&quot;&gt;파이썬 오브젝트 소스 코드 보기&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;inspect&lt;/code&gt; 모듈 임포트
&lt;code class=&quot;highlighter-rouge&quot;&gt;import inspect&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;살펴볼 오브젝트 임포트
&lt;code class=&quot;highlighter-rouge&quot;&gt;from calendar import HTMLCalendar&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;소스코드를 보기좋은 형태로 출력
&lt;code class=&quot;highlighter-rouge&quot;&gt;print(inspect.getsource(HTMLCalendar))&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;스탠다드-라이브러리-메소드-오버라이딩&quot;&gt;스탠다드 라이브러리 메소드 오버라이딩&lt;/h1&gt;
&lt;p&gt;HTMLCalendar는 베이스 클래스인 Calendar를 상속받아 HTML 달력을 만들어주는 역할을 하는 클래스이다.&lt;br /&gt;
0(월요일:디폴트)에서 6(일요일)까지 달력의 시작을 정의하는 하나의 firstweekday인자를 전달받는다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;print(calendar.HTMLCalendar(6).formatmonth(2017,6))&lt;/code&gt;과 같이 입력하면 아래의 달력이 출력된다.&lt;/p&gt;

&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;month&quot;&gt;
&lt;tr&gt;&lt;th colspan=&quot;7&quot; class=&quot;month&quot;&gt;June 2017&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th class=&quot;sun&quot;&gt;Sun&lt;/th&gt;&lt;th class=&quot;mon&quot;&gt;Mon&lt;/th&gt;&lt;th class=&quot;tue&quot;&gt;Tue&lt;/th&gt;&lt;th class=&quot;wed&quot;&gt;Wed&lt;/th&gt;&lt;th class=&quot;thu&quot;&gt;Thu&lt;/th&gt;&lt;th class=&quot;fri&quot;&gt;Fri&lt;/th&gt;&lt;th class=&quot;sat&quot;&gt;Sat&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;noday&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;td class=&quot;noday&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;td class=&quot;noday&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;td class=&quot;noday&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;td class=&quot;thu&quot;&gt;1&lt;/td&gt;&lt;td class=&quot;fri&quot;&gt;2&lt;/td&gt;&lt;td class=&quot;sat&quot;&gt;3&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;sun&quot;&gt;4&lt;/td&gt;&lt;td class=&quot;mon&quot;&gt;5&lt;/td&gt;&lt;td class=&quot;tue&quot;&gt;6&lt;/td&gt;&lt;td class=&quot;wed&quot;&gt;7&lt;/td&gt;&lt;td class=&quot;thu&quot;&gt;8&lt;/td&gt;&lt;td class=&quot;fri&quot;&gt;9&lt;/td&gt;&lt;td class=&quot;sat&quot;&gt;10&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;sun&quot;&gt;11&lt;/td&gt;&lt;td class=&quot;mon&quot;&gt;12&lt;/td&gt;&lt;td class=&quot;tue&quot;&gt;13&lt;/td&gt;&lt;td class=&quot;wed&quot;&gt;14&lt;/td&gt;&lt;td class=&quot;thu&quot;&gt;15&lt;/td&gt;&lt;td class=&quot;fri&quot;&gt;16&lt;/td&gt;&lt;td class=&quot;sat&quot;&gt;17&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;sun&quot;&gt;18&lt;/td&gt;&lt;td class=&quot;mon&quot;&gt;19&lt;/td&gt;&lt;td class=&quot;tue&quot;&gt;20&lt;/td&gt;&lt;td class=&quot;wed&quot;&gt;21&lt;/td&gt;&lt;td class=&quot;thu&quot;&gt;22&lt;/td&gt;&lt;td class=&quot;fri&quot;&gt;23&lt;/td&gt;&lt;td class=&quot;sat&quot;&gt;24&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;sun&quot;&gt;25&lt;/td&gt;&lt;td class=&quot;mon&quot;&gt;26&lt;/td&gt;&lt;td class=&quot;tue&quot;&gt;27&lt;/td&gt;&lt;td class=&quot;wed&quot;&gt;28&lt;/td&gt;&lt;td class=&quot;thu&quot;&gt;29&lt;/td&gt;&lt;td class=&quot;fri&quot;&gt;30&lt;/td&gt;&lt;td class=&quot;noday&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;오브젝트 소스코드를 살펴보고 HTML Calendar의 첫번째 row에 좌/우 이동 화살표(&amp;lt;,&amp;gt;)를 출력해보자.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;파이썬 라이브러리 코드&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;formatmonthname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theyear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;themonth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withyear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    Return a month name as a table row.
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withyear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;themonth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theyear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;themonth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&amp;lt;tr&amp;gt;&amp;lt;th colspan=&quot;7&quot; class=&quot;month&quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;주석을 보면 달 이름을 테이블 행 형태로 돌려주는 메소드이고, 리턴값은 HTML의 형태인 것을 알 수 있다.&lt;br /&gt;
해당 메소드를 바로 오버라이딩 하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;month_name[themonth]&lt;/code&gt; 구문에서 오류가 뜨는데,&lt;br /&gt;
month_name은 calendar 모듈의 Data 속성이므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;from calendar import month_name&lt;/code&gt;를 해야한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;오버라이딩한 메소드&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;calendar&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTMLCalendar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_name&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrowCalendar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HTMLCalendar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstweekday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HTMLCalendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstweekday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;formatmonthname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withyear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withyear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&amp;lt;tr&amp;gt;&amp;lt;th colspan=&quot;1&quot; class=&quot;month_arrow&quot;&amp;gt; &amp;lt; &amp;lt;/th&amp;gt;'&lt;/span&gt; \
            &lt;span class=&quot;s&quot;&gt;'&amp;lt;th colspan=&quot;5&quot; class=&quot;month&quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&amp;lt;/th&amp;gt;'&lt;/span&gt; \
            &lt;span class=&quot;s&quot;&gt;'&amp;lt;th colspan=&quot;1&quot; class=&quot;month_arrow&quot;&amp;gt; &amp;gt; &amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;7칸짜리 테이블로 달 이름을 넘겨주는 것을 5칸으로 줄이고 양쪽에 한칸씩 좌/우 화살표를 넣었다.&lt;br /&gt;
이후 css 클래스를 적용해서 화살표를 정렬하면 완성&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.month_arrow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;완성된-달력&quot;&gt;완성된 달력&lt;/h2&gt;
&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;month&quot;&gt;
&lt;tr&gt;&lt;th colspan=&quot;1&quot; class=&quot;month_arrow&quot;&gt; &amp;lt; &lt;/th&gt;&lt;th colspan=&quot;5&quot; class=&quot;month&quot;&gt;June 2017&lt;/th&gt;&lt;th colspan=&quot;1&quot; class=&quot;month_arrow&quot;&gt; &amp;gt; &lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th class=&quot;sun&quot;&gt;Sun&lt;/th&gt;&lt;th class=&quot;mon&quot;&gt;Mon&lt;/th&gt;&lt;th class=&quot;tue&quot;&gt;Tue&lt;/th&gt;&lt;th class=&quot;wed&quot;&gt;Wed&lt;/th&gt;&lt;th class=&quot;thu&quot;&gt;Thu&lt;/th&gt;&lt;th class=&quot;fri&quot;&gt;Fri&lt;/th&gt;&lt;th class=&quot;sat&quot;&gt;Sat&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;noday&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;td class=&quot;noday&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;td class=&quot;noday&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;td class=&quot;noday&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;td class=&quot;thu&quot;&gt;1&lt;/td&gt;&lt;td class=&quot;fri&quot;&gt;2&lt;/td&gt;&lt;td class=&quot;sat&quot;&gt;3&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;sun&quot;&gt;4&lt;/td&gt;&lt;td class=&quot;mon&quot;&gt;5&lt;/td&gt;&lt;td class=&quot;tue&quot;&gt;6&lt;/td&gt;&lt;td class=&quot;wed&quot;&gt;7&lt;/td&gt;&lt;td class=&quot;thu&quot;&gt;8&lt;/td&gt;&lt;td class=&quot;fri&quot;&gt;9&lt;/td&gt;&lt;td class=&quot;sat&quot;&gt;10&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;sun&quot;&gt;11&lt;/td&gt;&lt;td class=&quot;mon&quot;&gt;12&lt;/td&gt;&lt;td class=&quot;tue&quot;&gt;13&lt;/td&gt;&lt;td class=&quot;wed&quot;&gt;14&lt;/td&gt;&lt;td class=&quot;thu&quot;&gt;15&lt;/td&gt;&lt;td class=&quot;fri&quot;&gt;16&lt;/td&gt;&lt;td class=&quot;sat&quot;&gt;17&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;sun&quot;&gt;18&lt;/td&gt;&lt;td class=&quot;mon&quot;&gt;19&lt;/td&gt;&lt;td class=&quot;tue&quot;&gt;20&lt;/td&gt;&lt;td class=&quot;wed&quot;&gt;21&lt;/td&gt;&lt;td class=&quot;thu&quot;&gt;22&lt;/td&gt;&lt;td class=&quot;fri&quot;&gt;23&lt;/td&gt;&lt;td class=&quot;sat&quot;&gt;24&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;sun&quot;&gt;25&lt;/td&gt;&lt;td class=&quot;mon&quot;&gt;26&lt;/td&gt;&lt;td class=&quot;tue&quot;&gt;27&lt;/td&gt;&lt;td class=&quot;wed&quot;&gt;28&lt;/td&gt;&lt;td class=&quot;thu&quot;&gt;29&lt;/td&gt;&lt;td class=&quot;fri&quot;&gt;30&lt;/td&gt;&lt;td class=&quot;noday&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

</content>
 </entry>
 
 <entry>
   <title>Google의 머신러닝 라이브러리, 텐서플로 알아보기 - 환경설정 및 설치</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-04T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D/2017/06/04/tensorflow-demo</id>
   <content type="html">&lt;h1 id=&quot;설치&quot;&gt;설치&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;파이썬3 가상환경 생성&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ virtualenv --system-site-packages -p python3 타겟폴더 이름 # Python3 기준&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;가상환경 실행&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ source ~/tensorflow/bin/activate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;텐서플로 설치&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ pip3 install --upgrade tensorflow&lt;/code&gt; # CPU 버전, GPU 버전은 tensorflow-gpu로 설치&lt;/li&gt;
  &lt;li&gt;데모파일 작성 (&lt;code class=&quot;highlighter-rouge&quot;&gt;demo.py&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;node1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;node2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# also tf.float32 implicitly
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;실행 결과&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Tensor(&quot;Const:0&quot;, shape=(), dtype=float32) Tensor(&quot;Const_1:0&quot;, shape=(), dtype=float32)&lt;/code&gt;&lt;br /&gt;
위와 같이 출력되면 환경설정은 완료&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tensorflow.org/install/install_mac&quot;&gt;공식 설치문서&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;주요개념&quot;&gt;주요개념&lt;/h1&gt;

&lt;h2 id=&quot;tensor&quot;&gt;Tensor&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3 # a rank 0 tensor; this is a scalar with shape []
[1. ,2., 3.] # a rank 1 tensor; this is a vector with shape [3]
[[1., 2., 3.], [4., 5., 6.]] # a rank 2 tensor; a matrix with shape [2, 3]
[[[1., 2., 3.]], [[7., 8., 9.]]] # a rank 3 tensor with shape [2, 1, 3]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Tensorflow의 기본 자료구조.  &lt;br /&gt;
동적인 크기를 갖는 원시값의 다차원 데이터 배열이며 Tensor의 rank는 차원을 의미한다.&lt;/p&gt;

&lt;h2 id=&quot;computational-graph&quot;&gt;Computational Graph&lt;/h2&gt;
&lt;p&gt;노드 그래프로 배열된 일련의 텐서플로우 오퍼레이션 모음.&lt;br /&gt;
Tensorflow의 코어는 Computational Graph를 생성하고, 실행하는 각각의 부분으로 나뉜다.&lt;br /&gt;
그리하여 데모파일의 실행 결과가 각각의 노드값이 아닌 두개의 텐서가 출력된 것.&lt;/p&gt;

&lt;h3 id=&quot;computational-graph-실행&quot;&gt;Computational Graph 실행&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Session을 생성하고&lt;/li&gt;
  &lt;li&gt;Session.run()을 실행
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sess = tf.Session()
print(sess.run([node1, node2]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;실행결과&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2017-06-04 22:24:47.634630: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.
[3.0, 4.0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;워닝이 뜨기는 했지만 결과값은 제대로 출력되었다.&lt;br /&gt;
구글링해보니 로컬에서 소스코드를 빌드하지 않았을 경우 뜨는 오류라 한다.&lt;br /&gt;
해결방법 : &lt;a href=&quot;http://www.kwangsiklee.com/ko/2017/04/%ED%85%90%EC%84%9C%ED%94%8C%EB%A1%9C%EC%9A%B0-%EA%B2%BD%EA%B3%A0%EB%A9%94%EC%84%B8%EC%A7%80-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0-the-tensorflow-library-wasnt-compiled-to-use-sse3-instructions/&quot;&gt;링크&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;기타-더-읽어볼거리&quot;&gt;기타 더 읽어볼거리&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://tensorflowkorea.gitbooks.io/tensorflow-kr/content/g3doc/get_started/basic_usage.html&quot;&gt;텐서플로우 문서 한글 번역본&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.popit.kr/%ED%85%90%EC%84%9C%ED%94%8C%EB%A1%9C%EC%9A%B0tensorflow-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/&quot;&gt;텐서플로우 시작하기&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://pythonkim.tistory.com/39&quot;&gt;텐서보드 사용법&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;최종목표&quot;&gt;최종목표&lt;/h1&gt;
&lt;p&gt;텐서플로우를 이용한 Android app 작성&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Jekyll 커스텀 플러그인 개발 및 적용, Github 페이지에 적용하기 (2)</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-03T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/%EB%B8%94%EB%A1%9C%EA%B7%B8/2017/06/03/jekyll-custom-plugin-develop-and-adopt-to-github-(2)</id>
   <content type="html">&lt;h1 id=&quot;지난-포스팅&quot;&gt;지난 포스팅&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;/환경설정/블로그/2017/06/02/jekyll-custom-plugin-develop-and-adopt-to-github/&quot;&gt;Jekyll 커스텀 플러그인 개발 및 적용, Github 페이지에 적용하기&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;발단&quot;&gt;발단&lt;/h1&gt;
&lt;p&gt;다시 하루가 지나고 Github page에 접속하자, 어제 만든 플러그인이 동작하지 않았다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;total_blogging_date&lt;/code&gt; 태그가 동작하지 않아 하루가 지났음에도 총 일수가 더해지지 않은 것.&lt;br /&gt;
한참 루비코드만 들여다보다 생각해보니, Jekyll 자체가 정적인 페이지를 생성하는데 페이지를 빌드하지 않았는데도 갱신되는게 말이 안되는 상황.&lt;br /&gt;
계속해서 소스를 수정하면서 빌드하다보니, 제대로 동작하는 것으로 오해하게 된 것이었다.&lt;/p&gt;

&lt;h1 id=&quot;해결-방안&quot;&gt;해결 방안&lt;/h1&gt;
&lt;p&gt;총 블로깅 일수를 태그로 받았을때, 현재 날짜와 총 날짜를 계산할 때 사용된 마지막 날짜의 비교가 불가능하다.&lt;br /&gt;
태그에서 받은 총 블로깅 날짜만을 가지고 빌드하지 않은채로 며칠이 지났는지 알 방법이 없고,&lt;br /&gt;
혹여 있다해도 그냥 템플릿에서 가장 오래된 포스팅 날짜와 현재 날짜의 차이를 비교하는 것이 편하다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Calculate total_blogging_date_dynamically&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;date_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{{ site.posts.last.date }}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2017-05-31 00:00:00 +0900&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;date_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;86400000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// calc datediff&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#dynamic_day&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;del&gt;결국 위와 같이 템플릿에서 받아온 날짜를 가지고, 매크로 형태로 JQuery에 적용시킴으로 해결.&lt;/del&gt; &lt;br /&gt;
며칠 후 갑자기 날짜가 맞지않아 생각해보니, 그냥 내림을 해서 계산하면 안된다…&lt;br /&gt;
결국 시간단위를 제외한 Date값을 연산하는 아래와 같은 방법으로 로직 수정하여 해결.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;date_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2017-05-31 00:00:00 +0900&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2017-05-31 00:00:00 +0900&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;today&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;date_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;firstday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;86400000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// calc datediff&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#dynamic_day&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
마찬가지로 며칠째 포스팅을 이어가고 있는지도 마지막 빌드 이후 며칠이 지났는지 알수 없기에,&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;latest_post_date_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{{ site.posts.first.date }}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;day_passed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;latest_post_date_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;86400000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// if latest posting date passed a day then reset to 0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;day_passed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#current_date_streak&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 템플릿에서 받아온 값을 마지막 포스팅의 날짜와 현재 날짜가 하루이상 지났을때,&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;current_date_streak&lt;/code&gt; 태그 값을 0으로 덮어씌우도록 수정했다.&lt;/p&gt;

&lt;h1 id=&quot;추가-문제점&quot;&gt;추가 문제점&lt;/h1&gt;
&lt;p&gt;sitemap이 정적페이지로 빌드하다보니, &lt;code class=&quot;highlighter-rouge&quot;&gt;site.url&lt;/code&gt;값이 로컬이 반영된 값인 localhost가 들어가 버린다…&lt;br /&gt;
결국 사이트맵 내의 &lt;code class=&quot;highlighter-rouge&quot;&gt;site.url&lt;/code&gt; 값을 github pages 주소로 하드코딩.&lt;/p&gt;

&lt;h1 id=&quot;마무리&quot;&gt;마무리&lt;/h1&gt;
&lt;p&gt;Github Plugin 코드 및 README를 업데이트 했다. &lt;a href=&quot;https://github.com/MinyoungJung/jekyll-plugin-blogStreak&quot;&gt;링크&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Jekyll 커스텀 플러그인 개발 및 적용, Github 페이지에 적용하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-02T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/%EB%B8%94%EB%A1%9C%EA%B7%B8/2017/06/02/jekyll-custom-plugin-develop-and-adopt-to-github</id>
   <content type="html">&lt;h1 id=&quot;발단&quot;&gt;발단&lt;/h1&gt;
&lt;p class=&quot;message&quot;&gt; Jekyll로 구성한 블로그 디자인을 수정하며 조금씩 구색을 맞추기 시작했다.&lt;br /&gt; 
사이트맵을 추가해 구글에서 검색되지 않는 부분도 수정하고, &amp;nbsp;&lt;a href=&quot;http://tech.kakao.com/2016/07/07/tech-blog-story/&quot; target=&quot;_blank&quot;&gt;Kakao Tech 참고자료&lt;/a&gt;&lt;br /&gt;
어날리틱스 &amp;amp; 서치콘솔 연동과 같은 소소한 부분도 처리했다. &lt;br /&gt; 
&quot;블로그 자체에 큰 노력을 들이지 않고 컨텐츠에 집중해 매일 무엇인가 정리해보자&quot;는 취지도 이때까지는&lt;br /&gt; 맞는듯 했다... &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;하지만 데일리 로그라는 명목하에, 블로그 첫 게시일로부터 며칠이 지났고, 며칠째 포스팅을 이어가고 있는지 표시하고 싶다는 생각이 들었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;커스텀-플러그인-개발&quot;&gt;커스텀 플러그인 개발&lt;/h1&gt;
&lt;p&gt;Jekyll 환경변수, Liquid 템플릿 태그 등을 확인해 보았는데 마땅한 방법이 보이지 않았다.&lt;br /&gt;
어딘가에 있을법한 기능인데도 찾기가 쉽지 않아 기존 플러그인 몇 개의 소스를 들여다 보고 자체 제작하기로 했다.&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jekyll&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RenderTotalBloggingDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Liquid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Tag&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;registers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strptime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;docs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%Y-%m-%d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%Y-%m-%d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;liquid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'total_blogging_date'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RenderTotalBloggingDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;루비는 예전에 간단히 레일스를 만져볼때 빼고는 다뤄본적이 없어, 라이브러리나 문법등이 기억이 나지 않았다.&lt;br /&gt;
다행히 플러그인 구조가 간단하기에 큰 문제가 되지는 않았다.&lt;/p&gt;

&lt;h2 id=&quot;플러그인-구조&quot;&gt;플러그인 구조&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Jekyll 모듈에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Liquid::Tag&lt;/code&gt;를 상속받은 클래스를 생성한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;render(context)&lt;/code&gt;함수를 오버라이딩 한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;liquid::Template.register_tag('태그이름', Jekyll:: 태그 클래스 이름)&lt;/code&gt;과 같이 태그를 등록한다.&lt;/li&gt;
  &lt;li&gt;등록된 태그는 템플릿에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;{% 태그이름 %}&lt;/code&gt;과 같이 사용가능하다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;플러그인-적용&quot;&gt;플러그인 적용&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;블로그 경로에 &lt;code class=&quot;highlighter-rouge&quot;&gt;_plugins&lt;/code&gt; 폴더를 생성한다.&lt;/li&gt;
  &lt;li&gt;원하는 곳에 태그를 넣는다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;github-page로-적용&quot;&gt;Github page로 적용?&lt;/h1&gt;
&lt;p class=&quot;message&quot;&gt; 로컬에서 잘 동작하는 것을 확인하고, Github로 페이지를 푸쉬했다.&lt;br /&gt;그리고... &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/post_assets/2017-06-02/mail_from_github.png&quot; alt=&quot;깃허브에서 온 메일&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;color:red; font-weight:bold;&quot;&gt;빌드가 실패했다!&lt;/p&gt;

&lt;h2 id=&quot;원인-분석&quot;&gt;원인 분석&lt;/h2&gt;
&lt;p&gt;여전히 Tag가 인식되지 않는단다. 이유를 확인해보니, 보안상의 이유로 &lt;a href=&quot;https://github.com/github/pages-gem&quot;&gt;github/pages-gem&lt;/a&gt;을&lt;br /&gt;
제외한 커스톰 plugin을 Github에서는 공식 사용할 수 없게 되어있다.&lt;/p&gt;

&lt;h2 id=&quot;해결방안&quot;&gt;해결방안&lt;/h2&gt;
&lt;p&gt;다행히 Workaround가 존재한다. 자세한 것은 다른 분의 링크로 대체.
&lt;a href=&quot;http://gumpcha.github.io/blog/github-pages-with-jekyll-custom-plugin/&quot; target=&quot;_blank&quot;&gt;링크&lt;/a&gt;
간단히 요약하면,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Jekyll이 생성하는 정적 페이지인 &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;폴더를 Github에 Master 브랜치로 등록한다.&lt;/li&gt;
  &lt;li&gt;소스코드를 담은 기존 Master 브랜치는 Source 브랜치로 따로 딴 후, Source에서 동일하게 포스팅을 작성한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll serve&lt;/code&gt;를 실행하면 템플릿 태그는 전부 정적 리소스로 변경된다.&lt;/li&gt;
  &lt;li&gt;정적 리소스만 포함한 마스터 브랜치(&lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; 폴더)와 Source 브랜치를 모두 Github에 푸시한다.&lt;/li&gt;
  &lt;li&gt;마스터 브랜치를 삭제한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;문제점&quot;&gt;문제점&lt;/h2&gt;
&lt;p&gt;매번 포스팅 할때마다 브랜치를 새로 생성하고 Source에서 작업하고 다시 Master를 삭제하는 방법을 사용해야 한다.&lt;br /&gt;
다행히 쉘 스크립트를 이용해서 간편하게 해결 가능하다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;publish.sh&lt;/code&gt;를 다음과 같이 블로그 폴더에 생성하고,&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

git checkout &lt;span class=&quot;nb&quot;&gt;source
&lt;/span&gt;git branch &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; master
git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; master 
git filter-branch &lt;span class=&quot;nt&quot;&gt;--subdirectory-filter&lt;/span&gt; _site/ &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;
git push &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt;
git checkout &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;필요한 일련의 명령들을 하나로 모은다.&lt;/p&gt;

&lt;p&gt;그 이후 블로그를 작성하는 방법은 아래와 같다.&lt;/p&gt;

&lt;h1 id=&quot;블로그-퍼블리싱&quot;&gt;블로그 퍼블리싱&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; 폴더에 마크다운 작성&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(source) $ jekyll serve&lt;/code&gt; 로 정적 사이트 생성&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(source) $ git add .&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(source) $ git commit -m 'Commit message'&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(source) $ ./publish.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;plugin-링크&quot;&gt;Plugin 링크&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/MinyoungJung/jekyll-plugin-blogStreak&quot;&gt;깃허브&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;사용법&quot;&gt;사용법&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;블로그 폴더 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;_plugins&lt;/code&gt; 폴더를 생성한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;blog_streak.rb&lt;/code&gt; 파일을 &lt;code class=&quot;highlighter-rouge&quot;&gt;_plugins&lt;/code&gt; 폴더에 넣는다.&lt;/li&gt;
  &lt;li&gt;템플릿에 태그를 넣는다. &lt;code class=&quot;highlighter-rouge&quot;&gt;{% 태그이름 %}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;태그-종류&quot;&gt;태그 종류&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;del&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{% total_blogging_date %}&lt;/code&gt;&lt;/del&gt;&lt;br /&gt;
&lt;del&gt;첫 포스팅부터 현재까지 지난 일 수&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{% current_date_streak %}&lt;/code&gt;&lt;br /&gt;
현재 연속 포스팅 일 수 (포스팅을 하지 않고 하루를 넘기면 초기화 됨)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{% longest_date_streak %}&lt;/code&gt;&lt;br /&gt;
최장 연속 포스팅 일 수 (첫 포스팅부터 현재까지 최장 연속 포스팅 일 수)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/환경설정/블로그/2017/06/03/jekyll-custom-plugin-develop-and-adopt-to-github-(2)/&quot;&gt;Jekyll 커스텀 플러그인 개발 및 적용, Github 페이지에 적용하기(2)&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Mac Finder에서 Tag를 이용한 파일 분류, Mac 키보드의 특수문자 입력하기</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-06-01T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//mac%20%EC%82%AC%EC%9A%A9%ED%8C%81/2017/06/01/mac-finder-tagging-special-character</id>
   <content type="html">&lt;h2 id=&quot;mac-finder에서-tag를-이용해-파일-분류하기&quot;&gt;Mac Finder에서 Tag를 이용해 파일 분류하기&lt;/h2&gt;
&lt;p&gt;Jekyll을 이용해 포스팅을 하려니 포스팅 폴더 접근이 귀찮았다.&lt;br /&gt;
보통 이런 경우 Finder의 즐겨찾기에 작업 폴더를 추가하여 사용하는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; 폴더의 언더바가 마음에 거슬려 태그를 이용해 정리하기로 했다.&lt;/p&gt;

&lt;h3 id=&quot;tag-이용방법&quot;&gt;Tag 이용방법&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Finder를 연다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘&lt;/code&gt;(커맨드)+&lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;(콤마)를 눌러 Finder 환경 설정으로 들어간다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;태그&lt;/code&gt; 탭에서 Tag 이름 및 색상을 수정한다
&lt;img src=&quot;/post_assets/2017-06-01/finder_settings.png&quot; alt=&quot;태그 수정&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;위쪽 목록 영역은 사이드바, 아래쪽 즐겨찾기 태그 부분은 Finder에서 파일을 우클릭 했을때 나타나는 즐겨찾기 메뉴&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Tag를 이용하여 분류한 파일 
&lt;img src=&quot;/post_assets/2017-06-01/finder_sidebar.png&quot; alt=&quot;태그를 이용해 분류&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;mac-키보드의-특수문자등-입력하기&quot;&gt;Mac 키보드의 특수문자(⌘⎋⌥⌃등) 입력하기&lt;/h2&gt;
&lt;p&gt;포스팅을 하다보니 맥 키보드에 존재하는 특수문자를 입력해야 하는 경우가 생긴다.&lt;br /&gt;
한번 설정하면 계속 남아있긴 하지만 설정법 등은 매번 잊어버리고 인터넷에서 다시 찾게되는 경향이 있어 정리했다.&lt;/p&gt;

&lt;h3 id=&quot;특수문자-추가-방법&quot;&gt;특수문자 추가 방법&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘&lt;/code&gt;(커맨드)+&lt;code class=&quot;highlighter-rouge&quot;&gt;⌃&lt;/code&gt;(컨트롤)+&lt;code class=&quot;highlighter-rouge&quot;&gt;⌴&lt;/code&gt;(스페이스)를 눌러 특수문자 입력창을 띄운다.&lt;/li&gt;
  &lt;li&gt;왼쪽 위의 &lt;code class=&quot;highlighter-rouge&quot;&gt;목록 사용자화&lt;/code&gt;를 선택한다.
&lt;img src=&quot;/post_assets/2017-06-01/special character_customize.png&quot; alt=&quot;목록 사용자화&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;목록에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;기술 기호&lt;/code&gt;를 선택하면 특수문자 입력창에 추가된다.
&lt;img src=&quot;/post_assets/2017-06-01/special_character_setting.png&quot; alt=&quot;기술기호 선택&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Jekyll과 Lanyon을 이용한 블로깅 및 테마 편집 방법</title>
   <link href="https://minyoungjung.github.io/"/>
   <updated>2017-05-31T00:00:00+09:00</updated>
   <id>https://minyoungjung.github.io//%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/%EB%B8%94%EB%A1%9C%EA%B7%B8/2017/05/31/lanyon-theme-customize</id>
   <content type="html">&lt;h2 id=&quot;jekyll이란&quot;&gt;Jekyll이란?&lt;/h2&gt;
&lt;p&gt;정적 사이트 생성기.&lt;br /&gt;
간단히 말하면 마크다운 언어&lt;strong&gt;(.md 등)&lt;/strong&gt;로 작성된 글을 알아서 HTML로 변경해준다.&lt;br /&gt;
이러한 방식을 이용하여 포스팅 뿐만 아니라, 페이지 전체를 빌드할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;테마-설정&quot;&gt;테마 설정&lt;/h2&gt;
&lt;p&gt;Jekyll 및 테마를 설치하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll serve&lt;/code&gt; 명령을 실행하니
&lt;code class=&quot;highlighter-rouge&quot;&gt;Build Warning: Layout 'home' requested in index.md does not exist.&lt;/code&gt;
라는 warning과 함께 빈 화면이 출력되었다.&lt;br /&gt;
이는 Lanyon 테마 설치 이후 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;을 생성하는 마크다운인 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.md&lt;/code&gt;에
&lt;code class=&quot;highlighter-rouge&quot;&gt;layout: home&lt;/code&gt;이 설정되어 있으나, home이라는 레이아웃이 존재하지 않기 때문에 일어난다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해결방법 1 : &lt;code class=&quot;highlighter-rouge&quot;&gt;index.md&lt;/code&gt;를 삭제해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;이 알아서 처리하게 한다.&lt;/li&gt;
  &lt;li&gt;해결방법 2 : &lt;code class=&quot;highlighter-rouge&quot;&gt;index.md&lt;/code&gt;의 내용을 아래와 같이 바꾼다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; 폴더에 존재하는 default 레이아웃을 이용하여 포스트의 리스트를 출력하는 예제&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
---
layout: default
title: Home
---
&amp;lt;ul&amp;gt;
    {% for post in site.posts %}
&amp;lt;li&amp;gt;
    &amp;lt;a href=&quot;{{ post.url }}&quot;&amp;gt;{{ post.title }}&amp;lt;/a&amp;gt;
&amp;lt;/li&amp;gt;
    {% endfor %}
&amp;lt;/ul&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;테마-사이드바-설정&quot;&gt;테마 사이드바 설정&lt;/h2&gt;

&lt;h3 id=&quot;사이드바-추가&quot;&gt;사이드바 추가&lt;/h3&gt;
&lt;p&gt;마크다운 작성 시 파일 상단 머릿말을 다음과 같이 작성한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: page
title: About
---
페이지 내용
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;HTML 빌드 시 사이드바에 자동으로 추가되며 주소는 &lt;code class=&quot;highlighter-rouge&quot;&gt;base_url/title&lt;/code&gt;가 된다.&lt;/p&gt;

&lt;h3 id=&quot;기존-사이드바-수정&quot;&gt;기존 사이드바 수정&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt; 폴더 하위의 &lt;code class=&quot;highlighter-rouge&quot;&gt;sidebar.html&lt;/code&gt;을 수정한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;포스트-작성&quot;&gt;포스트 작성&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; 폴더 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;년-월-일-제목.md&lt;/code&gt;와 같은 이름으로 마크다운 파일을 생성한다.&lt;/p&gt;

&lt;p&gt;머릿말의 layout을 post로 선택하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; 폴더 하위의 &lt;code class=&quot;highlighter-rouge&quot;&gt;post.html&lt;/code&gt;을 이용해 페이지가 생성된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: post
title: Jekyll과 Lanyon을 이용한 블로깅 및 테마 편집 방법
---
이곳에 포스트 내용 작성
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2017-05-31-lanyon-theme-customize.md&lt;/code&gt;로 생성한 포스트의 주소는&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;base_url/2017/05/31/lanyon-theme-customize/&lt;/code&gt;가 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;느낀점&quot;&gt;느낀점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;글 자체를 집중해서 쓰기 좋다.&lt;br /&gt;
보기 좋게 꾸미는대 들어가는 노력이 줄어든다.&lt;br /&gt;
&lt;del&gt;하지만 페이지 자체를 꾸미는데 노력이 들어갈 것 같다는 느낌이 든다…&lt;/del&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Github와 연동 시 시너지가 발생한다.
    &lt;ul&gt;
      &lt;li&gt;Git repository를 이용해 블로그의 버전 관리를 할 수 있다.&lt;/li&gt;
      &lt;li&gt;블로그의 호스팅을 Github에서 제공한다.&lt;/li&gt;
      &lt;li&gt;한번 설정해 놓으면 사이트에 방문할 필요 없이 로컬에서 마크다운을 작성하고 git으로 push하면 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;마크다운을 작성하여 페이지를 구성하는 동작 방식이 포스팅뿐만 아니라 페이지 전체에 이용된다는 것이 인상적이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;레이아웃 및 페이지 수정에 대한 자유도가 높다. (진입장벽이 높다)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;일반인들이 쓰기에는 어려움이 따를 듯하다.
    &lt;ul&gt;
      &lt;li&gt;깃허브 설정까지는 그렇다고 쳐도, 커맨드라인 인터페이스에 익숙한 일반인은 많지 않겠지..&lt;/li&gt;
      &lt;li&gt;페이지 테마와 레이아웃을 수정하는대 템플릿 태그와 html/css에 대한 이해가 어느 정도 필요하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;전체-소스코드&quot;&gt;전체 소스코드&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/MinyoungJung/minyoungjung.github.io&quot;&gt;Github repository (Link)&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 

</feed>
